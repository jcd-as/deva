# json (decoding/encoding) methods 
# (except that it only handles single-byte characters, not unicode chars as
# the json spec requires)
#
# TODO:
#

import re;

#############################################################################
# module-scope variables:
#############################################################################
local re_str = new re.re( '"[\\s\\S]*"' );
local re_bool = new re.re( "\\s*true|false\\s*" );
# num regex, unescaped = -?(0|\d+)(\.\d+([eE]?[-+]?\d+)?)?
local re_num = new re.re( "-?(0|\\d+)(\\.\\d+([eE]?[-+]?\\d+)?)?" );

#############################################################################
# pre-declarations for compiler
#############################################################################
local check_nesting = null;
local decode_object = null;
local encode_object = null;
local get_items = null;
local decode_pair = null;
local decode_array = null;
local decode_value = null;
local get_next_item = null;

#############################################################################
# "public" functions:
#############################################################################

# decode a json string into an object
def decode( json )
{
	# ensure there are an equal number of opening and closing braces & brackets
	if( !check_nesting( json ) )
	{
		seterror( "Invalid JSON object: mis-matched braces" );
		return null;
	}

	return decode_object( json );
}

# encode an object into a json string
def encode( obj )
{
	if( type( obj ) != "map" 
		&& type( obj ) != "class"
		&& type( obj ) != "instance" )
	{
		seterror( "Cannot JSON encode an object of type '" + type( obj ) + "'" );
		return;
	}
	else
		return encode_object( obj );
}


#############################################################################
# "private" helper functions:
#############################################################################

# recursive function to pull simple objects out of a json encoded string
def decode_object( json, start = 0, end = -1 )
{
	# ensure there are an equal number of opening and closing braces & brackets
	if( !check_nesting( json ) )
	{
		seterror( "Invalid JSON object: mis-matched braces" );
		return null;
	}

	local ret = {};

	# find the opening brace
	local open = json.find( "{", start, end );
	if( open == null )
	{
		seterror( "Invalid JSON object: missing opening brace" );
		return null;
	}

	# find the closing brace
	local close = json.rfind( "}", end );
	if( close == null )
	{
		seterror( "Invalid JSON object: missing closing brace" );
		return null;
	}

	# separate the string between the opening and closing braces into items,
	# divided by commas
#	local inner = json[open + 1 : close - 1];
	local inner = json[open + 1 : close];
	local items = get_items( inner );
	# let errors propagate
	if( error() )
		return;

	for( item in items )
	{
		local val = decode_pair( item );
		if( !val )
			# let errors propagate
			return null;
		else
			ret[str( val[0] )] = val[1];
	}

	return ret;
}

# get a list of all the pairs in an object
def get_items( input )
{
	local pairs = [];
	local idx = 0;
	while( idx < input.length() )
	{
		local new_idx = get_next_item( input, idx );
		# let errors propagate
		if( error() )
			return;
		local pair = input[idx:new_idx];
		pair = pair.strip();
		if( pair.length() > 0 )
			pairs.append( pair );
		idx = new_idx + 1;
	}
	return pairs;
}

# find a string in a given output and return its start & end
def find_string( input )
{
	# single character can never be a valid string
	if( input.length() < 2 )
	{
		seterror( "Invalid JSON object: missing/mis-matched quotes" );
		return;
	}
	# scan for '"'
	local start = input.find( '"' ); 
	if( start == null )
	{
		seterror( "Invalid JSON object: missing/mis-matched quotes" );
		return;
	}
	# find matching '"', which is not escaped
	local done = false;
	local end = null;
	while( !done )
	{
		end = input.find( '"', start + 1 ); 
		if( end == null )
		{
			seterror( "Invalid JSON object: missing/mis-matched quotes." );
			return;
		}
		if( input[end-1] != '\\' )
			done = true;
	}
	return [start, end];
}

# return the end index of the next item, given a starting index
def get_next_item( input, start = 0 )
{
	local text = input[start:$];
	# search ahead for the first comma that is NOT inside a [] or {} pair or a
	# string (including nesting)
	local regex = new re.re( '[,"\[\{]' );
	local match = regex.search( text );
	if( !match )
		return start + text.length();
	local idx = match[0].start;
	# loop while looking for commas
	while( true )
	{
		if( match )
		{
			idx = match[0].start;
			local c = text[idx];
			if( c == ',' )
			{
				return start + idx;
			}
			else if( c == '[' )
			{
				local count = 1;
				local re_bracket = new re.re( "[\[\]]" );
				idx += 1;
				while( count > 0 )
				{
					# scan forward for brackets 
					local text = text[idx:$];
					local found = re_bracket.search( text );
					if( found )
					{
						local j = found[0].end;
						idx += j;
						if( found[0].str == '[' )
							count += 1;
						else if( found[0].str == ']' )
							count -= 1;
					}
					else
					{
						seterror( "Invalid JSON: mismatched square brackets" );
						return;
					}
				}
				# TODO: idx is now at the closing bracket, need to search for the comma
				# (or end of item if it is the last pair) ???
			}
			else if( c == '{' )
			{
				local count = 1;
				local re_brace = new re.re( "[\{\}]" );
				idx += 1;
				while( count > 0 )
				{
					# scan forward for braces 
					local text = text[idx:$];
					local found = re_brace.search( text );
					if( found )
					{
						local j = found[0].end;
						idx += j;
						if( found[0].str == '{' )
							count += 1;
						else if( found[0].str == '}' )
							count -= 1;
					}
					else
					{
						seterror( "Invalid JSON: mismatched curly brackets" );
						return;
					}
				}
				# TODO: idx is now at the closing brace, need to search for the comma
				# (or end of item if it is the last pair) ???
			}
			else if( c == '"' )
			{
				local text = text[idx:$];
				local loc = find_string( text );
				# let errors propagate
				if( error() )
				{
					return;
				}
				idx += loc[1] + 1;
			}
			# end of objects (no trailing comma)??
		}
		# no match? must be the last item
		else
			return start + text.length();

		# get the next match
#		print( idx );
		if( idx >= text.length() )
			return start + text.length();
		match = regex.search( text[idx:$] );
		# no match? must be the last item
		if( match == null )
		{
			return start + text.length();
		}
		# adjust match start/end to the full text
		match[0].start = match[0].start + idx;
		match[0].end = match[0].end + idx;
	}
	return start + idx;
}

# colon-separated string/value pair
def decode_pair( input )
{
	input = input.strip();

	# scan for lhs (string)
	local loc = find_string( input );
	local start = loc[0];
	local end = loc[1];

	local lhs = input[start + 1 : end];
	if( length( lhs ) == 0 )
	{
		seterror( "Invalid JSON object: empty string on left-hand side." );
		return;
	}
	# scan for ':'
	end = input.find( ':', end + 1 );
   	if( end == null )
	{
		seterror( "Invalid JSON object: no separating colon." );
		return;
	}
	local rhs = input[end + 1 : $];
	rhs = decode_value( rhs.strip() );
	# error decoding the value?	
	if( error() )
		return;

	return [lhs, rhs];
}

# string, number, boolean, null, array or object
def decode_value( input )
{
	input = input.strip();

	# try each type
	if( re_str.match( input ) )
	{
		# strip the whitespace and quotes
		return input.strip( '"' );
	}
	else if( re_num.match( input ) )
	{
		return num( input );
	}
	else if( re_bool.match( input ) )
	{
		if( input == "true" )
			return true;
		else
			return false;
	}
	else if( input == "null" )
	{
		return null;
	}
	else if( input[0] == '[' )
	{
		return decode_array( input );
	}
	else if( input[0] == '{' )
	{
		return decode_object( input );
	}
	else
	{
		# error out
		seterror( "Unknown type in json.decode_value()" );
		return;
	}
}

def decode_array( input, start = 0, end = -1 )
{
	# ensure there are an equal number of opening and closing braces & brackets
	if( !check_nesting( input ) )
		return null;

	local ret = [];

	# find the opening bracket
	local open = input.find( "[", start, end );
	if( open == null )
		return null;

	# find the closing bracket
	local close = input.rfind( "]", end );
	if( close == null )
		return null;

	# separate the string between the opening and closing brackets into items,
	# divided by commas
	local inner = input[open + 1 : close];
	local items = get_items( inner );
	# let errors propagate
	if( error() )
		return;

	for( item in items )
	{
		local val = decode_value( item );
		# error decoding the value?
		if( error() )
			return null;
		ret.append( val );
	}

	return ret;
}

def check_nesting( input )
{
	local vjson = input.split( "" );

	# ensure there are an equal number of opening and closing braces
	local num_open_braces = vjson.count( "{" );
	local num_close_braces = vjson.count( "}" );
	if( num_open_braces != num_close_braces )
		return false;

	# ensure there are an equal number of opening and closing brackets
	local num_open_brackets = vjson.count( "[" );
	local num_close_brackets = vjson.count( "]" );
	if( num_open_brackets != num_close_brackets )
		return false;

	return true;
}

def encode_object( obj )
{
	if( is_null( obj ) )
	{
		return "null";
	}
	else if( is_boolean( obj ) )
	{
		if( obj )
			return "true";
		else
			return "false";
	}
	else if( is_number( obj ) )
	{
		return str( obj );
	}
	else if( is_string( obj ) )
	{
		return '"' + obj + '"';
	}
	else if( is_vector( obj ) )
	{
		local s = "[";
		for( i in obj )
		{
			s += encode_object( i );
			if( error() )
				return;
			s += ", ";
		}
		# remove the trailing ", "
		# TODO: (the correct way to do this would be to avoid appending it in the
		# first place, but...)
		s = s[0:s.length()-2] + "]";
#		s += "]";
		return s;
	}
	else if( is_map( obj ) 
		|| is_class( obj ) 
		|| is_instance( obj ) )
	{
		local s = "{";
		for( key, val in obj )
		{
			# only strings are allowed as keys in JSON
			if( type( key ) != "string" )
			{
				seterror( "Only strings are allowed as object key values in JSON" );
				return;
			}
			else
			{
				s += encode_object( key );
				if( error() )
					return;
				s += ":";
				s += encode_object( val );
				if( error() )
					return;
				s += ", ";
			}
		}
		# remove the trailing ", "
		# TODO: (the correct way to do this would be to avoid appending it in the
		# first place, but...)
		s = s[0:s.length()-2] + "}";
#		s += "}";
		return s;
	}
	# end-user shouldn't get with one of these:
	# is_size( obj )
	# is_function( obj )
	# is_native_function( obj )
	# is_symbol_name( obj )
	# is_native_obj( obj )
	# type( obj ) == "<invalid>"
	else 
	{
		seterror( "Invalid type for user data" );
		return;
	}
}

