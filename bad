deva IL:
line_num : junk.dv ; , address/sized-value = 0 ; 
defun : foo, address/sized-value = 18 ; 
enter : 
defarg : 

# start of for loop (return address for call to length)
push : , address/sized-value = 33 ; 
# code to get vector/map onto the stack
push : 1 ; 
push : 0 ; 
new_vec: : , address/sized-value = 2 ; 

# save a copy into the magic table variable
dup : 0 ; 
push : unknown: '.table00000001264301354.0000943829' ; 
swap : 
store : 

# call 'length' builtin
call : function_call: 'length' ; , address/sized-value = 1 ; 

# do the compare
push : 0 ; 
dup : 1 ; 
dup : 1 ; 
neq : 

# jump on false
jmpf : , address/sized-value = 338 ; 

# load the table (vector)
load : unknown: '.table00000001264301354.0000943829' ; 
dup : 1 ; 
tbl_load : 
push : unknown: 'i' ; 
swap : 
store : 

# body of the for loop:
enter : 
push : , address/sized-value = 298 ; 
push : unknown: 'i' ; 
line_num : junk.dv ; , address/sized-value = 5 ; 
call : function_call: 'print' ; , address/sized-value = 1 ; 
pop : 
push : 0 ; 
return : 
leave : 
# end of the loop body

# loop
push : 1 ; 
add : 
jmp : , address/sized-value = 155 ; 
pop : 
pop : 
# end loop


end : 
push : , address/sized-value = 383 ; 
line_num : junk.dv ; , address/sized-value = 13 ; 
call : function_call: 'foo' ; , address/sized-value = 0 ; 
pop : 
halt : 
