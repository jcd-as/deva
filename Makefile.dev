# makefile for test driver for deva language grammars

# source directories:
VPATH = src

# sources/objs for test executable
TEST_SOURCES=test.cpp symbol.cpp parser_ids.cpp error_report_parsers.cpp dobject.cpp util.cpp
TEST_OBJS=$(patsubst %.cpp, %.o, ${TEST_SOURCES})
# sources/objs for devac executable
DEVAC_SOURCES= \
	devac.cpp \
	symbol.cpp \
	fileformat.cpp \
	debug.cpp \
	parser_ids.cpp \
	error_report_parsers.cpp \
	scope.cpp compile.cpp \
	semantics.cpp \
	instructions.cpp \
	dobject.cpp \
	util.cpp
DEVAC_OBJS=$(patsubst %.cpp, %.o, ${DEVAC_SOURCES})
# sources/objs for deva executable
DEVA_SOURCES =  \
	builtins.cpp \
	compile.cpp \
	deva.cpp \
	dobject.cpp \
	error_report_parsers.cpp \
	executor.cpp \
	fileformat.cpp \
	instructions.cpp \
	parser_ids.cpp \
	scope.cpp \
	semantics.cpp \
	symbol.cpp \
	util.cpp \
	vector_builtins.cpp \
	map_builtins.cpp \
	string_builtins.cpp \
	module_os.cpp \
	module_bit.cpp \
	module_math.cpp \
	module_re.cpp
DEVA_OBJS=$(patsubst %.cpp, %.o, ${DEVA_SOURCES})
# sources/objs for devadb executable
DEVADB_SOURCES =  \
	builtins.cpp \
	compile.cpp \
	devadb.cpp \
	dobject.cpp \
	error_report_parsers.cpp \
	executor.cpp \
	fileformat.cpp \
	instructions.cpp \
	parser_ids.cpp \
	scope.cpp \
	semantics.cpp \
	symbol.cpp \
	util.cpp \
	vector_builtins.cpp \
	map_builtins.cpp \
	string_builtins.cpp \
	module_os.cpp \
	module_bit.cpp \
	module_math.cpp \
	module_re.cpp
DEVADB_OBJS=$(patsubst %.cpp, %.o, ${DEVADB_SOURCES})
# dependency files (header dependencies)
TEST_DEP_FILES=$(patsubst %.cpp, %.dep, ${TEST_SOURCES})
DEVAC_DEP_FILES=$(patsubst %.cpp, %.dep, ${DEVAC_SOURCES})
DEVA_DEP_FILES=$(patsubst %.cpp, %.dep, ${DEVA_SOURCES})
DEVADB_DEP_FILES=$(patsubst %.cpp, %.dep, ${DEVADB_SOURCES})

# on gcc 4.3+:
# if you enable optimization (-O1 or greater) you have to throw
# -fno-inline-small-functions too, or else the parser will fail to parse
# anything (code gen bug, I assume)
CXXFLAGS = -c -g -I inc -DVERSION=\"0.9.5\"
#-O2 -fno-inline-small-functions 

# -undefined dynamic_lookup required on Mac OS X to find Boost symbols...
LDFLAGS = -g
#LDFLAGS = -g -undefined dynamic_lookup

all : tags ID test devac deva devadb

tags : devac deva devadb
	ctags -R 

ID : devac deva devadb
	mkid -i "C++"

test : ${TEST_OBJS}
	g++ ${LDFLAGS} -lboost_filesystem -o test ${TEST_OBJS}
	#g++ ${LDFLAGS} -lboost_filesystem-mt -o test ${TEST_OBJS}

devac : ${DEVAC_OBJS}
	g++ ${LDFLAGS} -lboost_program_options -lboost_filesystem -o devac ${DEVAC_OBJS}
	#g++ ${LDFLAGS} -lboost_program_options-mt -lboost_filesystem-mt -o devac ${DEVAC_OBJS}

deva : ${DEVA_OBJS}
	g++ ${LDFLAGS} -lboost_program_options -lboost_filesystem -lboost_regex -o deva ${DEVA_OBJS}
	#g++ ${LDFLAGS} -lboost_program_options-mt -lboost_filesystem-mt -lboost_regex-mt -o deva ${DEVA_OBJS}

devadb : ${DEVADB_OBJS}
	g++ ${LDFLAGS} -lboost_program_options -lboost_filesystem -lboost_regex -o devadb ${DEVADB_OBJS}
	#g++ ${LDFLAGS} -lboost_program_options-mt -lboost_filesystem-mt -lboost_regex-mt -o devadb ${DEVADB_OBJS}

%.o : %.cpp
	g++ ${CXXFLAGS} -o $@ $<

clean:
	cd src
	rm *.o test devac deva devadb *.dep*

# run tests
check:
	./deva runtests.dv

include ${TEST_DEP_FILES}
include ${DEVAC_DEP_FILES}
include ${DEVA_DEP_FILES}
include ${DEVADB_DEP_FILES}

%.dep : %.cpp
	@set -e; rm -f $@; \
	gcc -MM $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$


