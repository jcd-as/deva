<?xml version="1.0" ?><todo version="0.1.20">	
		<note done="1252965849" priority="veryhigh" time="1252903036">		
			semantic checking
				<note done="1252965684" priority="veryhigh" time="1252903146">			
					func_decl: set id symbol type to function
						<comment>				
							no can do, must be done at run-time, not in semantic checking
						</comment>			
				</note>		
				<note done="1252965709" priority="veryhigh" time="1252903167">			
					const_decl: set id symbol type to const
						<comment>				
							no can do, must be done at run-time, not in semantic checking. did emit warning on re-def'ing a variable as const
						</comment>			
				</note>		
				<note done="1252904955" priority="veryhigh" time="1252903280">			
					for_s: loop variables need to be injected into a new scope, which is the parent of the loop (statement|compound_statement) 
						<comment>				
							done in grammar, not semantics
						</comment>			
				</note>		
				<note done="1252904971" priority="veryhigh" time="1252903330">			
					arg_list_decl: arguments need to be injected into a new scope, which is the parent of the function body (statement|compound_statement)
					<comment>				
						done in grammar, not semantics
					</comment>			
				</note>		
		</note>	
		<note done="1254025727" priority="veryhigh" time="1252903578">		
			intermediate language: need to define the IL code, which will transform to virtual machine code
		</note>	
		<note done="1254025738" priority="veryhigh" time="1252903640">		
			Virtual Machine: need to define the VM and opcodes. 
stack based, all ops pull arguments off stack
		</note>	
		<note done="1255025028" priority="veryhigh" time="1254025793">		
			map and vector handling, including dot op and for loop
		</note>	
		<note done="1252906732" priority="high" time="1252904662">		
			make vim syntax file for deva files
			<comment>			
				based off awk.vim. needs some work, but functional
			</comment>		
		</note>	
		<note done="1252979519" priority="high" time="1252904695">		
			add deva file support to my .vimrc (set cindent etc) OR filetype plugin to do this??
		</note>	
		<note done="1254025745" priority="high" time="1253124087">		
			make dot operator chainable (e.g. a.b.c)
		</note>	
		<note done="1256161537" priority="veryhigh" time="1254025776">		
			complete execution engine code and deva executable
		<comment>aside from bug fixes and new features, it's done
</comment></note>	
		<note done="1257296068" priority="veryhigh" time="1254868797">		
			objects/user-defined types (fields, method look-up, 'class' keyword etc)
		<comment>done. still missing: inheritance, 'copy' built-in for classes and instances
</comment></note>	
		<note done="1255753655" priority="veryhigh" time="1255048474">		
			fix the data/object/ref-counting model
			<comment>			
				runtime scope/symbol tbl object needs to track pointers.
need ref-count and add-ref/release-ref operations on DevaObject class.
			</comment>		
		</note>	
		<note done="1255656185" priority="veryhigh" time="1255237872">		
			get bsort.dv working (bubble sort)
		</note>	
		<note done="1255903163" priority="high" time="1252905837">		
			accept hex numbers (and octal and binary??)
		<comment>0o as prefix for octal, instead of just '0', and 0b as prefix for binary
</comment></note>	
		<note done="1256951910" priority="high" time="1254444594">		
			vector and string slicing (ala python)
		<comment>
</comment></note>	
		<note done="1255582640" priority="high" time="1255048474">		
			tests 6,7,22 fail on mac os x. the jmp/fcn/return offsets are all different, presumably because of the sizeof a long
		</note>	
		<note done="1255839736" priority="high" time="1255237571">		
			remove Redefining symbol warning?
		<comment>done. left code commented out with a comment asking if it could be put to some use, bue any sense... maybe only for vector/map new's and const definitions?
</comment></note>	
		<note done="1255632626" priority="veryhigh" time="1255582612">		
			something with debug-info messes up back-patching of fcns. compile and run test11.dv for repro.
		</note>	
		<note done="1255726500" priority="veryhigh" time="1255670572">		
			debugging info causes BAD CODE GEN. compile test 16 with debug info and run for repro case.
		</note>	
		<note done="1255846484" priority="high" time="1255807306">		
			print() builtin doesn't handle escape sequences ('\t', '\n' etc)
		<comment>actually the compiler wasn't 'unescaping' the strings
</comment></note>	
		<note done="1255839681" priority="veryhigh" time="1255807935">		
			testing...
		<comment>delete me
</comment></note>	
<note done="1255839706" priority="veryhigh" time="1255814228">add 'copy' built-in function to create copies of vectors and maps
<comment>
</comment></note><note done="1255903825" priority="high" time="1255839820">make 'const' work
<comment>compiler rejects changes to consts (compile-time, not run-time). no instructions specific to const-ness, compile-time only information
</comment></note><note done="1256363440" priority="veryhigh" time="1255846573">modules and 'import' keyword
<note done="1256173525" priority="veryhigh" time="1256082030">namespace support, where each module is a namespace
<comment>namespaces (modules) are in-place, but currently modules are only files found in the cwd (no directory or path searching support)
</comment></note><comment>no search path yet, only loaded from local directory
</comment></note><note priority="high" time="1255897503">printing maps/vectors that contain maps/vectors doesn't walk the contained maps/vectors, just prints them as 'variables (sym_unknown)
</note><note done="1256161479" priority="veryhigh" time="1255897957">eval() builtin to compile code blocks at run-time
<comment>eval() implemented. it imports the eval'd code into the current namespace/module
</comment></note><note done="1256344247" priority="veryhigh" time="1255897996">modify 'deva' executable to compile and run if passed a .dv file instead of .dvc
<comment>
</comment></note><note priority="high" time="1256007195">import() builtin that replicates 'import' statement, but accepts paths/filenames instead of module names
</note><note done="1256173450" priority="high" time="1256160412">bug: escaped quotest (\&quot;) don't work properly inside of strings
<comment>replace() helper fcn called from unescape() was incorrectly using string::replace() (was passing the second arg as the offset into the string instead of the length of the replaced text)
</comment></note><note done="1256363667" priority="veryhigh" time="1256184973">code gen for a.b() (function calls on dot-op rhs) so vector/map builtins can be implemented (and the basis for user-defined types)
<note done="1256362642" priority="veryhigh" time="1256361141">the way arguments are passed needs modification to indicate HOW MANY args are being passed on the stack (another arg to the &quot;call&quot; instruction which is a 'function'/offset indicating how many args to pop off the stack)
<comment>actually, don't need that, there is one defarg op for each argument
</comment></note><comment>done. see test18.dv for a sample
</comment></note><note done="1256363388" priority="veryhigh" time="1256362973">function/method arguments are passed in the REVERSE order (backwards)!!
<comment>easy fix, reverse loop over children in gen_IL_arg_list_decl() (instructions.cpp)
</comment></note><note done="1256530077" priority="veryhigh" time="1256363869">add support for vector and map built-ins (e.g. vec.append(n))
<note done="1256446846" priority="veryhigh" time="1256446828">vector built-ins
<comment>completed
</comment></note><note done="1256530056" priority="veryhigh" time="1256446839">map built-ins
<comment>map builtins added
</comment></note><comment>
</comment></note><note done="1256756297" priority="veryhigh" time="1256442335">default arguments to functions/methods. defarg instruction can have an arg to define the default value.
<comment>done and done. now need to add support for them to builtins
</comment></note><note priority="high" time="1256516559">on unexpected exit (exception caught) from 'deva', the scope table will complain and throw an exception saying that it isn't empty, which is true, but unhelpful since we already know there was an unexpected failure
</note><note done="1256669946" priority="veryhigh" time="1256600502">detect when TOO MANY arguments are passed to a function/method
<comment>added empty, trailing 'defarg' instruction with no args to act as &quot;end-of-arguments&quot; marker
</comment></note><note done="1256623844" priority="veryhigh" time="1256621246">detect wrong number of arguments in the builtin functions (global, map and vector)
<comment>
</comment></note><note done="1256790201" priority="veryhigh" time="1256764666">add support for default args to all the builtins
<comment>vector builtins mostly
</comment></note><note done="1256843445" priority="veryhigh" time="1256793809">ScopeBuilder global (&quot;scope_bldr&quot;) is the source of 'leaks' reported by valgrind. it should be made a pointer and allocated and freed in main() (for devac and deva)
<comment>didn't need to make it a ptr, just release all the scope ptrs it holds after compilation is done (didn't bother in devac.cpp, as the process exits when compilation is done).
</comment></note><note done="1256847908" priority="high" time="1256843036">replace 'vector' and 'map' in the DevaObject code with typedefs so the types could be switched to more efficient types (deque &amp; hash_map, for instance) more easily
<comment>
</comment></note><note done="1256879594" priority="veryhigh" time="1256855245">vector builtins: map, filter and reduce (ala python equivalents)
<comment>
</comment></note><note done="1256939782" priority="veryhigh" time="1256855256">string builtins
<comment>added all vector equivalents that made sense. should examine python's string builtins for additional ideas. (and a 'slice' or substr method would make sense)
</comment></note><note priority="veryhigh" time="1256584124">interface to C functions and C objects (void*). Needed to implement &quot;open&quot; built-in and file IO methods
</note><note done="1257018344" priority="veryhigh" time="1256951898">BUG: adding a new vector with a name that already exists does NOT override the name to point at the vector (it remains pointing at whatever it used to point at)!
<comment>
</comment></note><note priority="veryhigh" time="1257036976">list comprehensions: syntactic sugar for the map/filter vector builtins
</note><note priority="veryhigh" time="1257048895">BUG: when parsing fails deva continues to try and read the .dvc file (and if an old one exists, will execute it) instead of bailing out. (devac correctly bails out, of course)
</note><note priority="veryhigh" time="1257296151">library module for file IO
</note><note done="1257303881" priority="veryhigh" time="1257302175">BUG: calling a class as a method is allowed and crashes (e.g. class Foo{}\nx = Foo();)
<comment>actually calling ANY object as a function was allowed, as the look-up in the symbol table was never checked for its type
</comment></note><note done="1257321274" priority="veryhigh" time="1257302741">BUG: calling a function or method with a method name (not call) as an argument results in the error &quot;Invalid return destination on stack when executing return instruction
<comment>had to fixup tbl_load code to NOT push the self arg in this case. tricky. required adding an arg to the instruction, a boolean false, to indicate method *calls*
</comment></note></todo>