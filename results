In eval_expression. i->value =  i->children.size() = 36
translation_unit: 
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = 42 i->children.size() = 0
		num: 42
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value = + i->children.size() = 2
		add_op: +
			In eval_expression. i->value = b i->children.size() = 0
			identifier: b
			In eval_expression. i->value = dea_d i->children.size() = 0
			identifier: dea_d
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value =  i->children.size() = 2
		const_decl: 
			In eval_expression. i->value = const i->children.size() = 0
			const: const
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
		In eval_expression. i->value = 75.3e19 i->children.size() = 0
		num: 75.3e19
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value = + i->children.size() = 2
		add_op: +
			In eval_expression. i->value = . i->children.size() = 2
			dot_op: .
				In eval_expression. i->value = a i->children.size() = 0
				identifier: a
				In eval_expression. i->value = b i->children.size() = 0
				identifier: b
			In eval_expression. i->value = - i->children.size() = 2
			add_op: -
				In eval_expression. i->value = . i->children.size() = 2
				dot_op: .
					In eval_expression. i->value = foo i->children.size() = 0
					identifier: foo
					In eval_expression. i->value = jam i->children.size() = 1
					identifier: jam
						In eval_expression. i->value =  i->children.size() = 4
						arg_list_exp: 
							In eval_expression. i->value = ( i->children.size() = 0
							(open|close)_paren_op: (
							In eval_expression. i->value = x i->children.size() = 0
							identifier: x
							In eval_expression. i->value = % i->children.size() = 2
							mult_op: %
								In eval_expression. i->value = y i->children.size() = 0
								identifier: y
								In eval_expression. i->value = 2 i->children.size() = 0
								num: 2
							In eval_expression. i->value = ) i->children.size() = 0
							(open|close)_paren_op: )
				In eval_expression. i->value = ! i->children.size() = 1
				unary_op: !
					In eval_expression. i->value = . i->children.size() = 2
					dot_op: .
						In eval_expression. i->value = bar i->children.size() = 0
						identifier: bar
						In eval_expression. i->value = goo i->children.size() = 1
						identifier: goo
							In eval_expression. i->value =  i->children.size() = 4
							arg_list_exp: 
								In eval_expression. i->value = ( i->children.size() = 0
								(open|close)_paren_op: (
								In eval_expression. i->value = . i->children.size() = 2
								dot_op: .
									In eval_expression. i->value = y i->children.size() = 0
									identifier: y
									In eval_expression. i->value = z i->children.size() = 0
									identifier: z
								In eval_expression. i->value = > i->children.size() = 2
								relational_op: >
									In eval_expression. i->value = x i->children.size() = 0
									identifier: x
									In eval_expression. i->value = 3 i->children.size() = 0
									num: 3
								In eval_expression. i->value = ) i->children.size() = 0
								(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = || i->children.size() = 2
		logical_op: ||
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
			In eval_expression. i->value = b i->children.size() = 0
			identifier: b
		In eval_expression. i->value = c i->children.size() = 0
		identifier: c
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value =  i->children.size() = 0
		vec_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		dot_op: .
			In eval_expression. i->value = b i->children.size() = 0
			identifier: b
			In eval_expression. i->value = c i->children.size() = 0
			identifier: c
		In eval_expression. i->value =  i->children.size() = 0
		map_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		dot_op: .
			In eval_expression. i->value = foo i->children.size() = 0
			identifier: foo
			In eval_expression. i->value = bar i->children.size() = 1
			identifier: bar
				In eval_expression. i->value =  i->children.size() = 2
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 0
		vec_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		dot_op: .
			In eval_expression. i->value = foo i->children.size() = 0
			identifier: foo
			In eval_expression. i->value = bar i->children.size() = 1
			identifier: bar
				In eval_expression. i->value =  i->children.size() = 2
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 0
		vec_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = x i->children.size() = 0
		identifier: x
		In eval_expression. i->value = null i->children.size() = 0
		null: null
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = y i->children.size() = 0
		identifier: y
		In eval_expression. i->value = true i->children.size() = 0
		boolean: true
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value = z i->children.size() = 0
		identifier: z
		In eval_expression. i->value = == i->children.size() = 2
		relational_op: ==
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
			In eval_expression. i->value = false i->children.size() = 0
			boolean: false
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = break i->children.size() = 1
	break_statement: break
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = continue i->children.size() = 1
	continue_statement: continue
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = return i->children.size() = 1
	return_statement: return
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = return i->children.size() = 2
	return_statement: return
		In eval_expression. i->value = false i->children.size() = 0
		boolean: false
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = return i->children.size() = 2
	return_statement: return
		In eval_expression. i->value = % i->children.size() = 2
		mult_op: %
			In eval_expression. i->value = . i->children.size() = 2
			dot_op: .
				In eval_expression. i->value = x i->children.size() = 0
				identifier: x
				In eval_expression. i->value = a i->children.size() = 0
				identifier: a
			In eval_expression. i->value = y i->children.size() = 1
			identifier: y
				In eval_expression. i->value =  i->children.size() = 2
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = . i->children.size() = 3
	dot_op: .
		In eval_expression. i->value = a i->children.size() = 1
		identifier: a
			In eval_expression. i->value =  i->children.size() = 2
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = . i->children.size() = 3
	dot_op: .
		In eval_expression. i->value = a i->children.size() = 1
		identifier: a
			In eval_expression. i->value =  i->children.size() = 3
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = x i->children.size() = 0
				identifier: x
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = foo i->children.size() = 1
	identifier: foo
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value =  i->children.size() = 2
		const_decl: 
			In eval_expression. i->value = const i->children.size() = 0
			const: const
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
		In eval_expression. i->value = 75.3e19 i->children.size() = 0
		num: 75.3e19
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	assignment_op: =
		In eval_expression. i->value =  i->children.size() = 2
		const_decl: 
			In eval_expression. i->value = const i->children.size() = 0
			const: const
			In eval_expression. i->value = z i->children.size() = 0
			identifier: z
		In eval_expression. i->value = "foo" i->children.size() = 0
		string: "foo"
		In eval_expression. i->value = ; i->children.size() = 0
		semicolon_op: ;
	In eval_expression. i->value = def i->children.size() = 3
	func: def
		In eval_expression. i->value = foo i->children.size() = 0
		identifier: foo
		In eval_expression. i->value =  i->children.size() = 2
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 0
		compound_statement: 
	In eval_expression. i->value = def i->children.size() = 3
	func: def
		In eval_expression. i->value = bar i->children.size() = 0
		identifier: bar
		In eval_expression. i->value =  i->children.size() = 4
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = x i->children.size() = 0
			identifier: x
			In eval_expression. i->value = y i->children.size() = 0
			identifier: y
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 0
		compound_statement: 
	In eval_expression. i->value = def i->children.size() = 3
	func: def
		In eval_expression. i->value = goo i->children.size() = 0
		identifier: goo
		In eval_expression. i->value =  i->children.size() = 4
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = x i->children.size() = 0
			identifier: x
			In eval_expression. i->value = y i->children.size() = 0
			identifier: y
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
		In eval_expression. i->value = x i->children.size() = 1
		identifier: x
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
	In eval_expression. i->value = def i->children.size() = 3
	func: def
		In eval_expression. i->value = jam i->children.size() = 0
		identifier: jam
		In eval_expression. i->value =  i->children.size() = 4
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
			In eval_expression. i->value = fdkasf_x i->children.size() = 0
			identifier: fdkasf_x
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 2
		compound_statement: 
			In eval_expression. i->value = = i->children.size() = 3
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				identifier: a
				In eval_expression. i->value = 42 i->children.size() = 0
				num: 42
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
			In eval_expression. i->value = return i->children.size() = 2
			return_statement: return
				In eval_expression. i->value = + i->children.size() = 2
				add_op: +
					In eval_expression. i->value = a i->children.size() = 0
					identifier: a
					In eval_expression. i->value = fdkasf_x i->children.size() = 0
					identifier: fdkasf_x
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
	In eval_expression. i->value = def i->children.size() = 3
	func: def
		In eval_expression. i->value = foobar i->children.size() = 0
		identifier: foobar
		In eval_expression. i->value =  i->children.size() = 2
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
		In eval_expression. i->value = = i->children.size() = 3
		assignment_op: =
			In eval_expression. i->value = = i->children.size() = 2
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				identifier: a
				In eval_expression. i->value = b i->children.size() = 0
				identifier: b
			In eval_expression. i->value = c i->children.size() = 0
			identifier: c
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
	In eval_expression. i->value = while i->children.size() = 2
	while_s: while
		In eval_expression. i->value = true i->children.size() = 0
		boolean: true
		In eval_expression. i->value = do_something i->children.size() = 2
		identifier: do_something
			In eval_expression. i->value =  i->children.size() = 2
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
	In eval_expression. i->value = for i->children.size() = 4
	for_s: for
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = in i->children.size() = 1
		in_op: in
			In eval_expression. i->value = c i->children.size() = 1
			identifier: c
				In eval_expression. i->value =  i->children.size() = 3
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = d i->children.size() = 0
					identifier: d
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 3
		compound_statement: 
			In eval_expression. i->value = do_some_stuff i->children.size() = 2
			identifier: do_some_stuff
				In eval_expression. i->value =  i->children.size() = 2
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
			In eval_expression. i->value = and_some_more_stuff i->children.size() = 2
			identifier: and_some_more_stuff
				In eval_expression. i->value =  i->children.size() = 2
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
			In eval_expression. i->value = = i->children.size() = 3
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				identifier: a
				In eval_expression. i->value = + i->children.size() = 2
				add_op: +
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = d i->children.size() = 0
					identifier: d
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	if_s: if
		In eval_expression. i->value = > i->children.size() = 2
		relational_op: >
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
			In eval_expression. i->value = b i->children.size() = 0
			identifier: b
		In eval_expression. i->value = A i->children.size() = 2
		identifier: A
			In eval_expression. i->value =  i->children.size() = 2
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		else_s: else
			In eval_expression. i->value = if i->children.size() = 3
			if_s: if
				In eval_expression. i->value = > i->children.size() = 2
				relational_op: >
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = c i->children.size() = 0
					identifier: c
				In eval_expression. i->value = B i->children.size() = 2
				identifier: B
					In eval_expression. i->value =  i->children.size() = 2
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						(open|close)_paren_op: (
						In eval_expression. i->value = ) i->children.size() = 0
						(open|close)_paren_op: )
					In eval_expression. i->value = ; i->children.size() = 0
					semicolon_op: ;
				In eval_expression. i->value = else i->children.size() = 1
				else_s: else
					In eval_expression. i->value = C i->children.size() = 2
					identifier: C
						In eval_expression. i->value =  i->children.size() = 2
						arg_list_exp: 
							In eval_expression. i->value = ( i->children.size() = 0
							(open|close)_paren_op: (
							In eval_expression. i->value = ) i->children.size() = 0
							(open|close)_paren_op: )
						In eval_expression. i->value = ; i->children.size() = 0
						semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	if_s: if
		In eval_expression. i->value = > i->children.size() = 2
		relational_op: >
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
			In eval_expression. i->value = b i->children.size() = 0
			identifier: b
		In eval_expression. i->value = A i->children.size() = 2
		identifier: A
			In eval_expression. i->value =  i->children.size() = 2
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		else_s: else
			In eval_expression. i->value = if i->children.size() = 3
			if_s: if
				In eval_expression. i->value = > i->children.size() = 2
				relational_op: >
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = c i->children.size() = 0
					identifier: c
				In eval_expression. i->value = B i->children.size() = 2
				identifier: B
					In eval_expression. i->value =  i->children.size() = 2
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						(open|close)_paren_op: (
						In eval_expression. i->value = ) i->children.size() = 0
						(open|close)_paren_op: )
					In eval_expression. i->value = ; i->children.size() = 0
					semicolon_op: ;
				In eval_expression. i->value = else i->children.size() = 1
				else_s: else
					In eval_expression. i->value = C i->children.size() = 2
					identifier: C
						In eval_expression. i->value =  i->children.size() = 2
						arg_list_exp: 
							In eval_expression. i->value = ( i->children.size() = 0
							(open|close)_paren_op: (
							In eval_expression. i->value = ) i->children.size() = 0
							(open|close)_paren_op: )
						In eval_expression. i->value = ; i->children.size() = 0
						semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 2
	if_s: if
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value = A i->children.size() = 1
		identifier: A
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	if_s: if
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = B i->children.size() = 1
		identifier: B
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		else_s: else
			In eval_expression. i->value = if i->children.size() = 3
			if_s: if
				In eval_expression. i->value = c i->children.size() = 0
				identifier: c
				In eval_expression. i->value = C i->children.size() = 1
				identifier: C
					In eval_expression. i->value = ; i->children.size() = 0
					semicolon_op: ;
				In eval_expression. i->value = else i->children.size() = 1
				else_s: else
					In eval_expression. i->value = D i->children.size() = 1
					identifier: D
						In eval_expression. i->value = ; i->children.size() = 0
						semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 2
	if_s: if
		In eval_expression. i->value = a i->children.size() = 0
		identifier: a
		In eval_expression. i->value = A i->children.size() = 1
		identifier: A
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	if_s: if
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = B i->children.size() = 1
		identifier: B
			In eval_expression. i->value = ; i->children.size() = 0
			semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		else_s: else
			In eval_expression. i->value = C i->children.size() = 1
			identifier: C
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	if_s: if
		In eval_expression. i->value = x i->children.size() = 0
		identifier: x
		In eval_expression. i->value = if i->children.size() = 3
		if_s: if
			In eval_expression. i->value = y i->children.size() = 0
			identifier: y
			In eval_expression. i->value = if i->children.size() = 3
			if_s: if
				In eval_expression. i->value = z i->children.size() = 0
				identifier: z
				In eval_expression. i->value =  i->children.size() = 0
				compound_statement: 
				In eval_expression. i->value = else i->children.size() = 1
				else_s: else
					In eval_expression. i->value = foobar i->children.size() = 2
					identifier: foobar
						In eval_expression. i->value =  i->children.size() = 2
						arg_list_exp: 
							In eval_expression. i->value = ( i->children.size() = 0
							(open|close)_paren_op: (
							In eval_expression. i->value = ) i->children.size() = 0
							(open|close)_paren_op: )
						In eval_expression. i->value = ; i->children.size() = 0
						semicolon_op: ;
			In eval_expression. i->value = else i->children.size() = 1
			else_s: else
				In eval_expression. i->value = barfoo i->children.size() = 2
				identifier: barfoo
					In eval_expression. i->value =  i->children.size() = 2
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						(open|close)_paren_op: (
						In eval_expression. i->value = ) i->children.size() = 0
						(open|close)_paren_op: )
					In eval_expression. i->value = ; i->children.size() = 0
					semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		else_s: else
			In eval_expression. i->value = no_way i->children.size() = 2
			identifier: no_way
				In eval_expression. i->value =  i->children.size() = 7
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = man i->children.size() = 0
					identifier: man
					In eval_expression. i->value = that i->children.size() = 0
					identifier: that
					In eval_expression. i->value = be i->children.size() = 0
					identifier: be
					In eval_expression. i->value = crazy i->children.size() = 0
					identifier: crazy
					In eval_expression. i->value = talk i->children.size() = 0
					identifier: talk
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				semicolon_op: ;
symbols:
A
B
C
D
a
and_some_more_stuff
b
bar
barfoo
be
c
crazy
d
dea_d
do_some_stuff
do_something
false
fdkasf_x
foo
foobar
goo
jam
man
no_way
null
talk
that
true
x
y
z
compiled test.dv successfully
