# deva script to run all the deva lang tests
# walks the 'tests' sub-dir looking for directories with a file called
# 'baseline'. when found, it tries to run "dotest" in the local directory, which
# should be a program or link to a program to run the actual test on an input
# file called "input.dv" and comparing the results to the 'baseline' file

import os;

local baseline = "baseline";

# simple insertion sort routine, used for running the tests in order
def isort( v, greater )
{
    for( i in range( 1, length(v) ) )
	{
        local value = v[i];
        local j = i - 1;
        local done = false;
        while( !done )
		{
			if( greater( v[j], value ) )
			{
                v[j + 1] = v[j];
                j = j - 1;
                if( j < 0 )
                    done = true;
			}
            else
                done = true;
		}
        v[j + 1] = value;
	}
}

# helper fcn to sort list of paths in the order we want
def path_greater( a, b )
{
	local as = os.splitpath( os.getdir( a ) );
	local bs = os.splitpath( os.getdir( b ) );
	local acomp = num( as[as.length()-1] );
	local bcomp = num( bs[bs.length()-1] );
	return acomp > bcomp;
}

# TODO: to this (machine int-size detection) correctly ??
local hosttype = os.getenv( "HOSTTYPE" );
local baseline_sized = null;
if( hosttype == "x86_64" )
	baseline_sized = "baseline.64";
else
	baseline_sized = baseline;

local init_dir = os.getcwd();

local failed_tests = [];

local dotest = "./dotest";

# check for valgrind cmd line options
local valgrind = false;
local valgrind_full = false;
local args = os.argv();
if( length( args ) > 1 )
{
	if( args[1] == "v" || args[1] == "valgrind" )
	{
		valgrind = true;
		dotest = "./dotest_valgrind";
		print( "running tests under valgrind..." );
	}
#	else if( args[1] == "vf" || args[1] == "valgrind-full" )
#	{
#		valgrind_full = true;
#		dotest = "./dotest_valgrind_full";
#		print( "running tests under valgrind..." );
#	}
}

# run 'dotest input.dv baseline' in each sub-dir
local wd = os.getcwd();
local tests = 0;
local files = os.dirwalk( os.joinpaths( [ os.getcwd(), "tests"] ) );
# need to (numeric) sort on the last dir in the path, as a lexical sort will
# leave us with ordering like: /tests/1, tests/11, tests/2
isort( files, path_greater );
for( file in files )
{
	if( os.getfile( file ) == baseline )
	{
		# skip directories with a 'disable' file in them
		if( !os.exists( os.joinpaths( [os.getdir( file ), "disable"] ) ) )
		{
			local bl = null;
			if( os.exists( os.joinpaths( [os.getdir( file ), baseline_sized] ) ) )
				bl = baseline_sized;
			else
				bl = baseline;

			local root = os.getdir( file );
			tests += 1;
			print( "processing " + root + " ..." );
			os.chdir( root );
			local ret = 0;
			if( valgrind )
				ret = os.exec( dotest + " input.dv" );
			else
				ret = os.exec( dotest + " input.dv " + bl );
			if( ret != 0 )
				failed_tests.append( root );
		}
	}
}

os.chdir( init_dir );

# re-print failures:
if( length( failed_tests ) != 0 )
{
	print( "\n" + str( length( failed_tests ) ) + " FAILED tests:" );
	for( s in failed_tests )
	{
		print( s );
	}
}
else
	print( "\nall tests SUCCEEDED" );
