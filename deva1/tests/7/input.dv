while( a )
{
	a = 0;
	b = 1;
}

# 0: push a
# 1: jmpf 11
# 2: enter
# 3: push a
# 4: push 0
# 5: store
# 6: push b
# 7: push 1
# 8: store
# 9: leave
# 10: jmp 0
# 11: halt

while( a )
{
	a = 0;
}

# 0: push a
# 1: jmpf 6
# 2: push a
# 3: push 0
# 4: store
# 5: jmp 0
# 6: halt

def foo( a, b, c )
{
}

if( x )
{
	if( y )
	{
		z();
	}
}
# ==>
# 0: push x
# 1: jmpf 4
# 2: push y
# 3: jumpf 4
# [call z; but NYI]
# 4: halt ('m', 'n')
#

if( x )
{
	if( y )
	{
		z();
	}
	a = b;
}
# ==>
# 0: push x
# 1: jmpf 9
# 2: enter
# 3: push y
# 4: jmpf 5
# [missing: z]
# 5: push a
# 6: push b
# 7: store
# 8: leave
# 9: halt 

if( x )
{
	y;
}
else
{
	z;
}
# ==>
# 0: push x
# 1: jmpf 2
# [missing: y]
# 2: jmp 3
# [missing: z]
# 3: halt

# as of fixes in 11/10 the semantic checker will now flag this as invalid, as
# they produce no results:
#a.b;
#a.b.c.d;
#a.b.c.d["foo"];
#a[b].c;
#a().b;
# these work instead, though:
a.b();
a.b.c.d = 0;
a.b.c.d["foo"] = 1;
a[b].c();
a().b = 2;

# test opcodes
# now an error (produces no result):
#"foo";
a = 1;
# 5
# now an error (produces no result):
#(5 + 5) / 2;
# but this works instead:
n = (5 + 5) / 2;
# 2
# now an error (produces no result):
#(2 * 2) % 3 + 1;
# but this works instead:
 n = (2 * 2) % 3 + 1;

# equivalent of
# a.b => a["b"]
# a["b"]["c"]["d"]["foo"];
# and a.b.c.d.foo;
