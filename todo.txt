DONE 2011-03-03 @deva +veryhigh need to unify run-time symbol look-ups - functions should be in the same look-up as variables/classes/etc. - need local vs 'extern' look-up methods ('extern' look-up will follow the scope chain to main, including modules, looking for the symbol)
    CLOSED: 2011-03-03 23:38:33
    :LOGBOOK:
        DONE: 2011-03-03 23:38:33

DONE 2011-03-02 @deva +veryhigh function defs don't override local vars, causing bad code gen (see test 8)
    CLOSED: 2011-03-02 19:52:44
    :LOGBOOK:
        DONE: 2011-03-02 19:52:44
        TODO: 2011-03-02 19:52:43
        CANCELLED: 2011-03-02 19:52:42
        DONE: 2011-03-02 19:52:41

TODO 2011-03-02 @deva +veryhigh need to mark all locals as obj_end types to start with AND add checks whenever accessing a local so that accessing undefined local vars becomes a runtime error

DONE 2011-02-26 @deva +veryhigh octal and binary numbers not handled (parsed) correctly
    CLOSED: 2011-02-27 16:15:44
    :LOGBOOK:
        DONE: 2011-02-27 16:15:44

TODO 2011-02-01 @deva +veryhigh get test suite running, this is starting to be a major PITA

TODO 2011-02-27 @deva +veryhigh implement string builtins!!

TODO 2011-03-02 @deva +veryhigh implement modules (math, bit, os et al)
DONE 2011-02-01 @deva +veryhigh overriding/scoping functions doesn't work
    CLOSED: 2011-02-27 16:20:02
    :LOGBOOK:
        DONE: 2011-02-27 16:20:02
	adding a fcn whose name already exists should *override* the existing fcn (map's behaviour is to not accept the new value) problem is that the v1 deva behvariour was to define the fcns as they occurred in the code, not at compile time, so at any point in the code the most recently defined fcn of a given name was called. v2 is defining them at compile time, and by the time the code executes there will only be ONE function of any given name currently this not only behaves incorrectly, but *leaks* subsequent fcns of the same name (see executor.h, line 119)
		SOLUTION: 
		store in an indexable collection that allows duplicates (multi-map)
		as each function is encountered, generate a "make_function" instruction (ala python) which takes 1 arg (the index of the function in the collection) and gets the fcn address from the tos
		execution of the make_function instruction stores this function in the local scope
		change the fcn call code gen to reference the function's index instead of its name as a constant
		===
		functions are currently stored in a map in the Executor, which has a method FindFunction() used to locate them. this needs to become a multi-map and the Find functionality moved to Scope/ScopeTable, which need to have local pointers to the function objects stored in Executor

TODO 2011-02-01 @deva +veryhigh slices!!
	codegen to generate slice ops
		VM support to execute them

TODO 2011-02-03 @deva +veryhigh functional vector builtins (map, filter, reduce etc) don't work with methods

TODO 2011-02-01 @deva +veryhigh remaining builtins (eval, error fcns, importmodule)

TODO 2011-02-01 @deva +high allow syntax: 'local n;' equivalent of 'local n = null;' ??

TODO 2011-02-01 @deva +high increment/decrement ops (++ and --) ??

TODO 2011-02-01 @deva +high short-circuiting && and || ops ??

TODO 2011-02-01 @deva +veryhigh debug info/line number instructions and Tracebacks on error

TODO 2011-02-01 @deva +high store classes separately
	classes need to be stored in a separate collection from other objects so that all the instances can be deleted *before* the classes (otherwise destructors won't operate properl

TODO 2011-02-01 @deva +veryhigh import/modules
	better module/package architecture: allow packages (dirs) of modules? 
	how do modules work? (each module is compiled into a separate code block, which means the 'import' op needs to create the new code block. all fcns in the module are inside this code block, just like the 'main' code block
	BUG: module names aren't being found (ICE in compiler)

TODO 2011-02-03 @deva +veryhigh implement bit, math, os, re modules

TODO 2011-02-01 @deva +high vector.sort() builtin should take less-than predicate

TODO 2011-02-01 @deva +high un-entangle compiler and execution engine
	so that executor can read .dvc files and execute them without needing to compile the .dv file

TODO 2011-02-01 @deva +high figure out how to turn off antlr error recovery in C

TODO 2011-02-04 @deva +high fix error messages - prevent things like "Missing <invalid>"
