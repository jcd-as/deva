DONE 2011-03-20 @deva +veryhigh add 'dotest_valgrind_compile' to mercurial (so that tests 6 and 22 can pass valgrind clean)
    CLOSED: 2011-03-24 18:08:04
    :LOGBOOK:
        DONE: 2011-03-24 18:08:04

TODO 2011-03-09 @deva +medium fix minor issues with tests:
	= tests working but needing test fixes:
	55 - relies on ordering of items in maps (baseline contains output of 'print( some_map );' )


TODO 2011-03-09 @deva +veryhigh tests not yet running:
	= execute tests needing fixes:
	28 (import NYI)
	29 (import NYI, .dvc NYI)
	37 (bit module NYI)
	38 (math module NYI)
	48 (eval builtin NYI)
	50 ('_re.delete() not allowed to use keyword & _re/re modules NYI)d
	53 (os module NYI)
	62 (json module NYI, seterror/geterror/error builtins NYI)
	68 (math module NYI)

DONE 2011-03-03 @deva +veryhigh need to unify run-time symbol look-ups - functions should be in the same look-up as variables/classes/etc. - need local vs 'extern' look-up methods ('extern' look-up will follow the scope chain to main, including modules, looking for the symbocal)
    CLOSED: 2011-03-03 23:38:33
    :LOGBOOK:
        DONE: 2011-03-03 23:38:33

DONE 2011-03-02 @deva +veryhigh function defs don't override local vars, causing bad code gen (see test 8)
    CLOSED: 2011-03-02 19:52:44
    :LOGBOOK:
        DONE: 2011-03-02 19:52:44
        TODO: 2011-03-02 19:52:43
        CANCELLED: 2011-03-02 19:52:42
        DONE: 2011-03-02 19:52:41

TODO 2011-03-02 @deva +veryhigh need add checks for (type==obj_end) whenever accessing a local so that accessing undefined local vars becomes a runtime error

DONE 2011-02-26 @deva +veryhigh octal and binary numbers not handled (parsed) correctly
    CLOSED: 2011-02-27 16:15:44
    :LOGBOOK:
        DONE: 2011-02-27 16:15:44

DONE 2011-02-01 @deva +veryhigh get test suite running, this is starting to be a major PITA
    CLOSED: 2011-03-06 13:20:25
    :LOGBOOK:
        DONE: 2011-03-06 13:20:25

DONE 2011-02-27 @deva +veryhigh implement string builtins!!
    CLOSED: 2011-03-09 19:46:05
    :LOGBOOK:
        DONE: 2011-03-09 19:46:05

TODO 2011-02-01 @deva +veryhigh import/modules
	better module/package architecture: allow packages (dirs) of modules? 
	how do modules work? (each module is compiled into a separate code block, which means the 'import' op needs to create the new code block. all fcns in the module are inside this code block, just like the 'main' code block
	ISSUE: modules need to reside in their own "namespace" with their own Executor object, or else they can't be loaded as precompiled .dvc files, because the indices in the constant pool will be different for the module when loaded solo vs loaded as an import. _OR_ they could be 'fixed' up at load time by adding the appropriate offset to every constant load...
	TBD:
	- each module should be on the callstack and scope stack so that locals and scopes work correctly. 
		= Executor::FindSymbol needs to take an (optional) module name and locate symbols by module
		= Executor::ResolveSymbol needs to take an (optional) module name and resolve symbols by module
	- each module needs its own 'main' Frame (e.g. 'main@foo') so it will have (persistent) locals. if these are pushed onto the callstack (which makes a sort of sense), then there needs to be some mechanism whereby to remove them... since they won't be removed by normal 'leave' ops
	- name lookup (foo.bar needs to check for bar in module foo) for tbl_load, tbl_store and method_load

TODO 2011-03-02 @deva +veryhigh implement built-in modules (math, bit, os, re et al)

TODO 2011-02-01 @deva +veryhigh debug info/line number instructions and Tracebacks on error

DONE 2011-02-01 @deva +veryhigh overriding/scoping functions doesn't work
    CLOSED: 2011-02-27 16:20:02
    :LOGBOOK:
        DONE: 2011-02-27 16:20:02
	adding a fcn whose name already exists should *override* the existing fcn (map's behaviour is to not accept the new value) problem is that the v1 deva behvariour was to define the fcns as they occurred in the code, not at compile time, so at any point in the code the most recently defined fcn of a given name was called. v2 is defining them at compile time, and by the time the code executes there will only be ONE function of any given name currently this not only behaves incorrectly, but *leaks* subsequent fcns of the same name (see executor.h, line 119)
		SOLUTION: 
		store in an indexable collection that allows duplicates (multi-map)
		as each function is encountered, generate a "make_function" instruction (ala python) which takes 1 arg (the index of the function in the collection) and gets the fcn address from the tos
		execution of the make_function instruction stores this function in the local scope
		change the fcn call code gen to reference the function's index instead of its name as a constant
		===
		functions are currently stored in a map in the Executor, which has a method FindFunction() used to locate them. this needs to become a multi-map and the Find functionality moved to Scope/ScopeTable, which need to have local pointers to the function objects stored in Executor

DONE 2011-02-01 @deva +veryhigh slices!!
    CLOSED: 2011-03-14 20:47:15
    :LOGBOOK:
        DONE: 2011-03-14 20:47:15
	codegen to generate slice ops
		VM support to execute them

DONE 2011-02-03 @deva +veryhigh functional vector builtins (map, filter, reduce etc) don't work with methods
	- solution: pass 'self' to builtins as an optional second argument
    CLOSED: 2011-03-28 18:56:36
    :LOGBOOK:
        DONE: 2011-03-28 18:56:36

TODO 2011-02-01 @deva +veryhigh remaining builtins (eval and importmodule)

TODO 2011-02-01 @deva +high allow syntax: 'local n;' equivalent of 'local n = null;' ??

TODO 2011-02-01 @deva +high increment/decrement ops (++ and --) ??

TODO 2011-02-01 @deva +high short-circuiting && and || ops ??

TODO 2011-03-06 @deva +medium check all memory allocations and ICE on out-of-memory

TODO 2011-02-01 @deva +high store classes separately
	classes need to be stored in a separate collection from other objects so that all the instances can be deleted *before* the classes (otherwise destructors won't operate properl

TODO 2011-02-01 @deva +high vector.sort() builtin should take less-than predicate

TODO 2011-02-01 @deva +high un-entangle compiler and execution engine
	so that executor can read .dvc files and execute them without needing to compile the .dv file

TODO 2011-02-01 @deva +high figure out how to turn off antlr error recovery in C

TODO 2011-02-04 @deva +high fix error messages - prevent things like "Missing <invalid>"
