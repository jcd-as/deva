TODO 2011-04-07 @deva +veryhigh implement devadb (debugger)

TODO 2011-05-10 @deva +veryhigh devash: redefining a class doesn't override the initial definition (local vars & fcns _are_ properly overridden)

TODO 2011-05-10 @deva +high tab should do <something> in devash

TODO 2011-05-10 @deva +high indentation in devash (?)

TODO 2011-03-02 @deva +high need add checks for (type==obj_end) whenever accessing a local so that accessing undefined local vars becomes a runtime error

TODO 2011-04-06 @deva +high put in a stack check under #ifdef DEBUG every time the stack is popped

TODO 2011-02-01 @deva +high figure out how to turn off antlr error recovery in C

TODO 2011-02-04 @deva +high fix parser error messages - prevent things like "Missing <invalid>"

TODO 2011-03-06 @deva +medium check all memory allocations and ICE on out-of-memory

TODO 2011-04-16 @deva +future list comprehensions ?

TODO 2011-04-16 @deva +future lambdas / anonymous functions ?

TODO 2011-04-17 @deva +future generators / yield ?

DONE 2011-04-28 @deva +veryhigh implement devash (shell)
    CLOSED: 2011-05-10 21:25:31
    :LOGBOOK:
        DONE: 2011-05-10 21:25:31
	difficulties at executing code in the context of @main (or any Frame) include:
	x locals aren't expandable. they are stored in the Frame, but because Scopes have pointers directly to the locals, you can't just re-alloc the collection in the Frame (even if it is a std::vector, a resize() op can/will re-alloc and invalidate the pointers)
	x semantic checking and compile-time symbol checking has to be relaxed - the current block won't have decls for the vars/fcns used
	x var lookups: even locals become external lookups because the compiler doesn't see the other symbols as local in the code it is compiling. all symbols have to be added to the global const tables
	x function calls don't work because we jump to the fcn offset in the wrong code block (@main's instead of the evaluated code's)

DONE 2011-05-08 @deva +high unify native (builtin) modules and deva module Objects. ISSUE: how can we determine what fcns are in a native module for dir()?
    CLOSED: 2011-05-09 23:13:43
    :LOGBOOK:
        DONE: 2011-05-09 23:13:43

DONE 2011-04-30 @deva +high implement raise() builtin that halts execution and dumps the traceback 
    CLOSED: 2011-04-30 15:48:53
    :LOGBOOK:
        DONE: 2011-04-30 15:48:53

DONE 2011-04-22 @deva +veryhigh BUG: optional arguments broken when calling into a function that creates objects & calls constructors (e.g. 'json.decode_object( s );')
    CLOSED: 2011-04-30 11:07:13
    :LOGBOOK:
        DONE: 2011-04-30 11:07:13

DONE 2011-03-09 @deva +veryhigh tests not yet running:
    CLOSED: 2011-04-29 09:36:11
    :LOGBOOK:
        DONE: 2011-04-29 09:36:11
	= execute tests needing fixes:
	29 (import .dvc NYI)

CANCELLED 2011-04-28 @deva +veryhigh add 'def foo;' syntactic sugar to declare a fcn to the compiler (semantic analyzer) for function pre-decls. NOT NEEDED - just use an 'extern' decl
    CLOSED: 2011-04-29 09:35:48
    :LOGBOOK:
        CANCELLED: 2011-04-29 09:35:48
        DONE: 2011-04-29 09:35:47

DONE 2011-04-27 @deva +veryhigh Semantic analysis/checking does not catch references to external variables with no 'extern' statement. (e.g. 'local x = 0;' at global scope, 'def foo(){ print( x ); }' should produce an error, but doesn't
    CLOSED: 2011-04-28 20:28:52
    :LOGBOOK:
        DONE: 2011-04-28 20:28:52

DONE 2011-04-26 @deva +veryhigh symbol resolution logic needs to be fixed Frame::FindSymbol and ScopeTable::FindSymbol with the optional boolean arg need to ONLY look in the current frame's symbols; resolution needs to look in:
    CLOSED: 2011-04-28 09:19:47
    :LOGBOOK:
        DONE: 2011-04-28 09:19:47
	- local symbols
	- special global symbols (i.e. builtins)
	- non-locals in calling frames, all the way up to the 'global' scope/frame ("main")

CANCELLED 2011-04-22 @deva +veryhigh BUG: naming locals the same as builtins will interfere with calling the builtins (e.g. 'str')
    CLOSED: 2011-04-28 09:20:11
    :LOGBOOK:
        CANCELLED: 2011-04-28 09:20:11
        DONE: 2011-04-28 09:20:10
        TODO: 2011-04-28 09:20:09
        CANCELLED: 2011-04-28 09:20:06
        DONE: 2011-04-28 09:20:05

DONE 2011-04-19 @deva +veryhigh read/write modules to/from dvc bytecode files
    CLOSED: 2011-04-28 20:28:48
    :LOGBOOK:
        DONE: 2011-04-28 20:28:48

DONE 2011-04-20 @deva +veryhigh BUG: --trace doesn't work when a .dvc file exists (even if not running it?)
    CLOSED: 2011-04-21 17:51:21
    :LOGBOOK:
        DONE: 2011-04-21 17:51:21

DONE 2011-02-01 @deva +veryhigh un-entangle compiler and execution engine
    CLOSED: 2011-04-19 18:46:01
    :LOGBOOK:
        DONE: 2011-04-19 18:46:01
	so that executor can read .dvc files and execute them without needing to compile the .dv file

DONE 2011-02-01 @deva +high vector.sort() builtin should take less-than predicate
    CLOSED: 2011-04-17 12:56:07
    :LOGBOOK:
        DONE: 2011-04-17 12:56:07

DONE 2011-02-01 @deva +high increment/decrement ops (++ and --) ??
    CLOSED: 2011-04-16 17:59:24
    :LOGBOOK:
        DONE: 2011-04-16 17:59:24

DONE 2011-02-01 @deva +high allow syntax: 'local n;' equivalent of 'local n = null;'
    CLOSED: 2011-04-16 15:15:51
    :LOGBOOK:
        DONE: 2011-04-16 15:15:51

DONE 2011-04-12 @deva +veryhigh Executor::GetOffsetForCallsite() needs to use the correct module's bp, not 'bp', in order for call sites & line numbers to work in modules outside of 'main'. (test stack trace across modules and errors in imported modules)
    CLOSED: 2011-04-15 19:27:36
    :LOGBOOK:
        DONE: 2011-04-15 19:27:36

DONE 2011-02-01 @deva +high short-circuiting && and || ops ??
    CLOSED: 2011-04-15 15:31:28
    :LOGBOOK:
        DONE: 2011-04-15 15:31:28

DONE 2011-04-14 @deva +veryhigh migrate 'runtests' to runtests.dv
    CLOSED: 2011-04-14 17:14:22
    :LOGBOOK:
        DONE: 2011-04-14 17:14:22

DONE 2011-02-01 @deva +veryhigh remaining builtins (eval and importmodule)
    CLOSED: 2011-04-10 16:39:55
    :LOGBOOK:
        DONE: 2011-04-10 16:39:55

DONE 2011-02-01 @deva +veryhigh debug info/line number instructions and Tracebacks on error
    CLOSED: 2011-04-12 09:46:27
    :LOGBOOK:
        DONE: 2011-04-12 09:46:27

DONE 2011-02-26 @deva +veryhigh octal and binary numbers not handled (parsed) correctly
    CLOSED: 2011-02-27 16:15:44
    :LOGBOOK:
        DONE: 2011-02-27 16:15:44

DONE 2011-02-01 @deva +veryhigh get test suite running, this is starting to be a major PITA
    CLOSED: 2011-03-06 13:20:25
    :LOGBOOK:
        DONE: 2011-03-06 13:20:25

DONE 2011-02-27 @deva +veryhigh implement string builtins!!
    CLOSED: 2011-03-09 19:46:05
    :LOGBOOK:
        DONE: 2011-03-09 19:46:05

DONE 2011-04-01 @deva +veryhigh importing (modules w/) classes w/ constructors/destructors segfaults (see deva-files/foo.dv). also calling methods on imported classes
    CLOSED: 2011-04-01 20:13:33
    :LOGBOOK:
        DONE: 2011-04-01 20:13:33

DONE 2011-02-01 @deva +veryhigh import/modules
    CLOSED: 2011-04-01 16:57:59
    :LOGBOOK:
        DONE: 2011-04-01 16:57:59
	better module/package architecture: allow packages (dirs) of modules? 
	how do modules work? (each module is compiled into a separate code block, which means the 'import' op needs to create the new code block. all fcns in the module are inside this code block, just like the 'main' code block
	ISSUE: modules need to reside in their own "namespace" with their own Executor object, or else they can't be loaded as precompiled .dvc files, because the indices in the constant pool will be different for the module when loaded solo vs loaded as an import. _OR_ they could be 'fixed' up at load time by adding the appropriate offset to every constant load...
	TBD:
	- each module should be on the callstack and scope stack so that locals and scopes work correctly. 
		= Executor::FindSymbol needs to take an (optional) module name and locate symbols by module
		= Executor::ResolveSymbol needs to take an (optional) module name and resolve symbols by module
	- each module needs its own 'main' Frame (e.g. 'main@foo') so it will have (persistent) locals. if these are pushed onto the callstack (which makes a sort of sense), then there needs to be some mechanism whereby to remove them... since they won't be removed by normal 'leave' ops
	- name lookup (foo.bar needs to check for bar in module foo) for tbl_load, tbl_store and method_load

DONE 2011-02-01 @deva +veryhigh overriding/scoping functions doesn't work
    CLOSED: 2011-02-27 16:20:02
    :LOGBOOK:
        DONE: 2011-02-27 16:20:02
	adding a fcn whose name already exists should *override* the existing fcn (map's behaviour is to not accept the new value) problem is that the v1 deva behvariour was to define the fcns as they occurred in the code, not at compile time, so at any point in the code the most recently defined fcn of a given name was called. v2 is defining them at compile time, and by the time the code executes there will only be ONE function of any given name currently this not only behaves incorrectly, but *leaks* subsequent fcns of the same name (see executor.h, line 119)
		SOLUTION: 
		store in an indexable collection that allows duplicates (multi-map)
		as each function is encountered, generate a "make_function" instruction (ala python) which takes 1 arg (the index of the function in the collection) and gets the fcn address from the tos
		execution of the make_function instruction stores this function in the local scope
		change the fcn call code gen to reference the function's index instead of its name as a constant
		===
		functions are currently stored in a map in the Executor, which has a method FindFunction() used to locate them. this needs to become a multi-map and the Find functionality moved to Scope/ScopeTable, which need to have local pointers to the function objects stored in Executor

DONE 2011-02-01 @deva +veryhigh slices!!
    CLOSED: 2011-03-14 20:47:15
    :LOGBOOK:
        DONE: 2011-03-14 20:47:15
	codegen to generate slice ops
		VM support to execute them

DONE 2011-02-03 @deva +veryhigh functional vector builtins (map, filter, reduce etc) don't work with methods
	- solution: pass 'self' to builtins as an optional second argument
    CLOSED: 2011-03-28 18:56:36
    :LOGBOOK:
        DONE: 2011-03-28 18:56:36

DONE 2011-03-20 @deva +veryhigh add 'dotest_valgrind_compile' to mercurial (so that tests 6 and 22 can pass valgrind clean)
    CLOSED: 2011-03-24 18:08:04
    :LOGBOOK:
        DONE: 2011-03-24 18:08:04

DONE 2011-03-03 @deva +veryhigh need to unify run-time symbol look-ups - functions should be in the same look-up as variables/classes/etc. - need local vs 'extern' look-up methods ('extern' look-up will follow the scope chain to main, including modules, looking for the symbocal)
    CLOSED: 2011-03-03 23:38:33
    :LOGBOOK:
        DONE: 2011-03-03 23:38:33

DONE 2011-03-02 @deva +veryhigh function defs don't override local vars, causing bad code gen (see test 8)
    CLOSED: 2011-03-02 19:52:44
    :LOGBOOK:
        DONE: 2011-03-02 19:52:44
        TODO: 2011-03-02 19:52:43
        CANCELLED: 2011-03-02 19:52:42
        DONE: 2011-03-02 19:52:41

DONE 2011-03-02 @deva +veryhigh implement built-in modules
    CLOSED: 2011-04-05 21:12:08
    :LOGBOOK:
        DONE: 2011-04-05 21:12:08
	[x] math
	[x] bit
	[x] os
	[x] re

