release 0.9.9
NOTE: THIS IS LIKELY THE FINAL DEVA V.1 SERIES RELEASE. I have started work on deva 2, which is a (nearly) complete re-write. All the deva v1 sources will be moved into a sub-directory and the main directory will become the deva 2 tree.
Deva v1 was a mostly successful experiment, but was written in a somewhat ad-hoc manner and as I expanded my use of it as a language it became apparent that there are several areas in need of improvement: 1) the parser is even slower than expected. the old boost spirit parser simply creates too much overhead, 2)there are several language issues that I would like to fix, but are difficult with the current parser, 3) the execution engine is not a 'real' VM and the bytecode format falls somewhere between a tree-driven interpreter and 'real' bytecode (meaning that execution is SLOW as well), 4) etc etc. Deva 2 is my attempt to address these a produce a more "real-world-ready" small language.

- fixes to prevent compilation of statements that have no effect (other than possible side effects) such as 'a;' or 'a.b[0];' and changes to tests to make them work with this fix
- fixed misc bugs around dot ops, calls and key ops ('[]') on both sides of assignments
- added test 69 to exercise these fixes
- updated test 7 baseline to current state (though the updated part is still broken: 'a().b' works now, but leaves the result on the stack)
- prevent assignment into function calls (and math-op assignments e.g. +=)
- fix for some assignment sequences (e.g. 'a.b.c[0].d().e = 0')
- bug fix: map methods 'rewind' and 'next' wouldn't work on classes and instances, meaning you couldn't iterate their contents in a 'for' loop
- bug fix: new fcns/methods with the same name as existing fcns/methods _didn't_ override the existing ones. (defun was calling 'Scope::AddObject' without orphaning any existing object of the same name)
- added rudimentary 'devash' deva shell
- renamed 'import' builtin to 'importmodule' so that it doesn't conflict with the keyword (duh)
- fixed slices: enabled negative indices to work properly, added '$' as a symbol meaning 'end-of-list' (rather than empty indices, like python uses), fixed some bugs and updated test code (json.dv)
- added a slice test (test 68) which includes euler's sieve among other things
- changed exit() builtin to have a default value of 0 for the arg
- updated the language doc
- enable nested functions!! this was *almost* just a matter of letting the grammar accept them, with a couple of very minor tweaks in the compiler and execution engine to handle them correctly
- added test 67 to test nested functions and updated the language doc
- created an 'import' built-in and changed the code-gen for the 'import' statement to call it
- removed un-needed/used instructions/op-codes: break, output and import
- fixes 'continue' so that it corrects for scopes it jumps out of
- changed the code-gen for 'break' statements to generate 'leave' ops and a 'jmp' (like continue) and deprecated the 'break' instruction (to be removed completely before a 1.0 release)
- added test 66 to test 'continue' more thoroughly (and 'break' too)
- fixed bug in range() built-in: range generated was [start, ..., end] when it should have been [start, ... end-1]
- added Executor::PrintDataStack() method for use in devadb stack printing and viewing the deva stack from gdb
- fixed serious problems with 'break'. this involved making sure that scopes are created for all flow control and loop construct bodies and fixing 'for' loop code-gen to work with breaks. (i would like to move more of the break handling from the execution engine into code-gen, but these fixes enable break to work properly).
- fixed runtests.dv and glob.dv which were improperly defining variables inside 'if' and 'else' bodies and then using them outside the bodies (which worked before, though it shouldn't have, because no scope was generated for single-line if/else bodies)
- added test 65 which more thoroughly tests break statements
- changed test harness to be able to run valgrind against deva in execution-only or compile-and-execute modes. (compile-and-execute takes a LONG time to complete all tests, so you only want to run it when necessary)
- made two fixes to make compilation valgrind clean
- removed all valgrind suppressions, which aren't needed with gcc 4.4.3 and valgrind 3.6.0 (and boost 1.4.1)
- fixed bug in _re module where trying to compile an invalid regular expression resulted in an (un-caught) boost exception instead of a deva error
- added support for breakpoints using short filenames. for guaranteed match a full path would still be preferred (for all except the main/entry file, which is always a short-name)
- fixed the devadb 'print' command to print strings inside single quotes
- rewrote string.split properly and added a bunch of test cases for it (to test 33)
- also fixed utility fcn split_env_var_paths to use the same algorithm
- changed printing output for vectors and maps (incl classes and instances) to print string values inside single quotes. improves readability
- updated many test baselines for this new output
- fixed files that had mixed tabs & spaces for indentation
- fixed bug in string.split() which would result in bogus items
- added support for special methods 'str' and 'repr' on user-defined classes (which are called by built-ins str() and print(), respectively)
- added test for 'str' and 'repr' special methods
- updated language doc
- fixed breakpoint command in devadb to work if only a line number is given (sets bp in current file at that line)
- added editline (BSD licensed readline) support to devadb
- added readline support to 'todo.py'
- moved ICE when all scopes are not clear at ScopeTable deletion into a debug only block
- fixed the baseline for test 31
- added factorial.dv illustrating recursive, iterative and 'lispish' (using reduce()) factorial implementations in deva
- added vector built-ins 'any' and 'all', incl documentation and updated vector built-ins test
- fix for calling vector map/filter/reduce on class methods
- test case for vector map/filter/reduce on class methods
- updated language spec
- bug fix: range() built-in didn't accept variables as arguments, only numbers
- vector built-ins map, reduce and filter did not accept methods (needed to pass 'self')
- fixed breaking change on vec_op compiling which caused test failures. (doh!)
- devadb: made 'breakpoint' command with no args add a breakpoint at the current file and line
- fixed bug where '+=' op wouldn't compile if the rhs was a string
- added simple JSON module (json.dv) and test for it
- fix for code gen bug where assignments like 'v[0].start = 1' generated bad code. (the index for the key expression for v[0] was never pushed onto the stack).
- small fix to previous checkin - ensure global scope mem is freed on exit due to error (exception). fixes valgrind tests
- fixed problem with the order of object deletion at exit from the global scope that could cause destructors not to get called on exit from the global scope (and even segfaults)
- in devadb breakpoints are now saved between runs of the debugee (within the same devadb session)

release 0.9.8
- all valgrind tests pass now, though test 50 fails if you run it from runtests.dv because the valgrind process aborts, not sure why yet. if you run it separately, however, it succeeds, so it doesn't appear to be a memory leak issue anyway.
- fixed memory leaks in do_vector_append and do_map_next, caught by valgrind tests
- fixed bug which caused leak: same 'variable re-assigned to new object leaks original object' bug but with 'local' variables. (also caught by valgrind)
- added missing valgrind tests
- serious issue fixed where instance variables that were assigned to a new object (e.g. 'a = new foo(); a = new bar();') would cause the initial object to be 'orphaned' and it's destructor would never get called. (the object was still deleted from memory, but it could still leak if its destructor needed to free native resources etc). fix was for the store_op handler to save the 'orphaned' objects into the current scope.
- fix for leak in new_class op
- fix for serious issue with instance destructors: when multiple instances pointed to the same object none of them would be destructed, because the leave_op handler was calling the destructors only when they had only one ref, _before_ popping the scope (which was where the DObject deletes, and thus the ref-count decrements, happened). moved the destructor calling code to the Scope nested class
- fixed bug where each new_vec or new_map op caused the new vec/map to leak (doh)
- update 64-bit baselines for tests 6, 7 and 23

release 0.9.7
- devadb: let user restart debuggee after it errors out
- fixed bug with error/seterror/geterror functions: destructors called by objects going out of scope reset the error flag/data
- fix for bug in string built-ins strip(), lstrip() and rstrip() where strings where _all_ characters should be stripped away weren't stripped to empty, but instead were returned as-is
- added test of vector.append() bug where reference types weren't added correctly
- fixed bug where the vector built-in method 'append' did not correctly add reference types
- added test for new error builtins
- added user error handling built-ins: error(), seterror() and geterror()
- bug fix: indexers ('[]' operators) were evaluated in reverse (wrong) order
- bug fix: early returns didn't adjust the scopes stack properly resulting in local variables not working correctly and stack traces in the debugger being incorrect in the face of early returns
- fix for recursion and for-loops: use stack variable to store vector/map instead of 'magic' var, and clean up stack ('locals') in return statements (to remove the stack var when returning out of the middle of the for loop)
- fixed quoting bug with strings
- fix for the arithmetic compound assignment operators (+= etc) when the lhs is a key op ([] or . op)

release 0.9.6
- renamed re module to match native module naming scheme 
- moved 'for' loop code generation to use the 'enumerable interface' consisting of 'rewind' and 'next' methods. this fixes the bad code-gen bug with returns inside 'for' loops, and allows user-defined types to be used in 'for' loops
- added builtin helpers module and used it in string builtins (should be used in all builtins eventually)k
- fixed return bugs with functions that had conditional returns but no default return
- fixed slice bug: slicing didn't handle -1 indices
- NOTE: test 53 is failing on Mac OS due to a file ordering issue: glob fcns work, but return items in a different order

release 0.9.5
- moved to use (require) boost::spirit 1.40+
- added 'stack' command to devadb to examine the program's data stack. updated FAQ, TODO and language doc.
- added '__module__' field to instance objects so that they know what module they came from, and can find the correct destructor to call, added code to use this when calling destructors. this fixes a serious bug where the wrong destructor could be called when classes of the same name existed in multiple namespace/modules
- map initializers added (finally). e.g. 'm = { "a" : 0, "b" : 1 };'. test 55 added to test them
- added 'join()' built-in and string and vector built-in methods. modified test 33 to test them. updated the language doc to include them
- bug fix: 'local' statements couldn't declare the 'local' and assign it to the return value of a call to a fcn in another module OR to a 'new' object
- added 'curdir', 'pardir', 'sep', 'extsep' and 'pathsep' to the os module. fixed bug in glob where it was returning full paths instead of relative paths (and causing test 53 to not work on different machines/setups)
- test fixes for mac os/64 bit
- changes to devadb: 'run' (restart) command implemented, fixed to require 'run' command after startup to start debugging (ala gdb)
- fixed code gen to generate calls to base-class constructors & destructors in user-defined and compiler-generated constructors/destructors. fixed bug where RunText() (used for eval in devadb etc) wasn't ignoring breakpoints (and was causing eval'd code to blow up if there were breakpoints set in it)
- added 'format' built-in fcn and built-in string method, fixed bugs in glob module, added tests for globbing and formatting
- changed code gen to create (no-arg, do nothing) constructors and destructors if the user hasn't (instead of throwing an error), updated error messages to include info on fcn name etc where possible
- added glob module (glob.dv), added os module builtins 'isdir()' and 'isfile()', fixed bugs: comparing objects of different types was broken (for = and !=), early returns caused bad execution. (added new opcode 'endf' to mark end of fcn definitions to fix early return problem)
- import now searches the paths set in the DEVA environment variable. fixed escaping/unescaping of escape sequences (and the replace string built-in, as they both use the 'replace' utility function)
- made built-in modules obey the same rules as non-builtins (built-in modules must be imported, just like "regular" modules).
- added regex module written in deva, which adds a regex class to wrap the 're' module, added DEVA env var path lookup for imports, os.dirwalk takes flag to indicate not to recurse, bug fixes: args to new methods in modules broken, error messages on omitted 'new' keyword improved, 'delete' methods in modules could not be located
- changes to valgrind tests to exclude parsing, as spirit causes a gazillion errors (all complain an uninitialized variable is used) and i got tired of trying to constantly figure out the suppressions for them :(
- (re) implemented destructors ("delete" methods), which are called when objects leave scope and there are no remaining references to them

release 0.9.4
- new regex builtin module, 're'
- bug fixes: tracebacks didn't track calls properlyr; map/vector/class/instance
  types couldn't be used as booleans (in 'if' statements etc)
- added 'trace' command to devadb
- added builtin range() fcn and math module built-in round() function
- bug fixes: identifiers that began with keywords caused errors; debug 
  (line number) info caused break statements to fail
- added exit() built-in function
- added builtins: stdin(), stdout(), stderr() which return the objects they 
  are named after
- added stack underflow checking and stack "min-limit" checking (which is 
  enabled during eval() so that eval'd code can't blow the stack). added 
  relevant exceptions: DevaCriticalException (for non-recoverable errors) and 
  DevaStackException for stack exceptions

release 0.9.3
- numerous bug fixes, most importantly regarding the name look-up sequences.
  modules/imports should now work properly (or better at least!)
- (no-argument) constructors are now called on base-classes when a child-class
  is constructed.
- new 'local' keyword to define local variables. (necessary esp. for recursive
  code).
- built-in functions 'name' and 'type' added.
- rudimentary debugger (command-line) now included (devadb). includes basic
  support for stepping, breakpoints, viewing variables, instruction (byte-code)
  level stepping.

release 0.9.2
- slicing added. deva-language-1.0 doc updated to document it. test 47 added to
  test it.
- bug fixes: mixed dot-operator and indexers ('[]' op) were broken in several
  cases. added test cases as well (test 46).

release 0.9.1
- bug fixes: chained assignments generating bad code, function calls as
  conditions cause bad code gen
- (hopefully) builds correctly under Mac OS X 10.6 and Ubuntu/Debian

release 0.9.0
- first public release

