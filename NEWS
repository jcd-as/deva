release 0.9.7
- devadb: let user restart debuggee after it errors out
- fixed bug with error/seterror/geterror functions: destructors called by objects going out of scope reset the error flag/data
- fix for bug in string built-ins strip(), lstrip() and rstrip() where strings where _all_ characters should be stripped away weren't stripped to empty, but instead were returned as-is
- added test of vector.append() bug where reference types weren't added correctly
- fixed bug where the vector built-in method 'append' did not correctly add reference types
- added test for new error builtins
- added user error handling built-ins: error(), seterror() and geterror()
- bug fix: indexers ('[]' operators) were evaluated in reverse (wrong) order
- bug fix: early returns didn't adjust the scopes stack properly resulting in local variables not working correctly and stack traces in the debugger being incorrect in the face of early returns
- fix for recursion and for-loops: use stack variable to store vector/map instead of 'magic' var, and clean up stack ('locals') in return statements (to remove the stack var when returning out of the middle of the for loop)
- fixed quoting bug with strings
- fix for the arithmetic compound assignment operators (+= etc) when the lhs is a key op ([] or . op)

release 0.9.6
- renamed re module to match native module naming scheme 
- moved 'for' loop code generation to use the 'enumerable interface' consisting of 'rewind' and 'next' methods. this fixes the bad code-gen bug with returns inside 'for' loops, and allows user-defined types to be used in 'for' loops
- added builtin helpers module and used it in string builtins (should be used in all builtins eventually)k
- fixed return bugs with functions that had conditional returns but no default return
- fixed slice bug: slicing didn't handle -1 indices
- NOTE: test 53 is failing on Mac OS due to a file ordering issue: glob fcns work, but return items in a different order

release 0.9.5
- moved to use (require) boost::spirit 1.40+
- added 'stack' command to devadb to examine the program's data stack. updated FAQ, TODO and language doc.
- added '__module__' field to instance objects so that they know what module they came from, and can find the correct destructor to call, added code to use this when calling destructors. this fixes a serious bug where the wrong destructor could be called when classes of the same name existed in multiple namespace/modules
- map initializers added (finally). e.g. 'm = { "a" : 0, "b" : 1 };'. test 55 added to test them
- added 'join()' built-in and string and vector built-in methods. modified test 33 to test them. updated the language doc to include them
- bug fix: 'local' statements couldn't declare the 'local' and assign it to the return value of a call to a fcn in another module OR to a 'new' object
- added 'curdir', 'pardir', 'sep', 'extsep' and 'pathsep' to the os module. fixed bug in glob where it was returning full paths instead of relative paths (and causing test 53 to not work on different machines/setups)
- test fixes for mac os/64 bit
- changes to devadb: 'run' (restart) command implemented, fixed to require 'run' command after startup to start debugging (ala gdb)
- fixed code gen to generate calls to base-class constructors & destructors in user-defined and compiler-generated constructors/destructors. fixed bug where RunText() (used for eval in devadb etc) wasn't ignoring breakpoints (and was causing eval'd code to blow up if there were breakpoints set in it)
- added 'format' built-in fcn and built-in string method, fixed bugs in glob module, added tests for globbing and formatting
- changed code gen to create (no-arg, do nothing) constructors and destructors if the user hasn't (instead of throwing an error), updated error messages to include info on fcn name etc where possible
- added glob module (glob.dv), added os module builtins 'isdir()' and 'isfile()', fixed bugs: comparing objects of different types was broken (for = and !=), early returns caused bad execution. (added new opcode 'endf' to mark end of fcn definitions to fix early return problem)
- import now searches the paths set in the DEVA environment variable. fixed escaping/unescaping of escape sequences (and the replace string built-in, as they both use the 'replace' utility function)
- made built-in modules obey the same rules as non-builtins (built-in modules must be imported, just like "regular" modules).
- added regex module written in deva, which adds a regex class to wrap the 're' module, added DEVA env var path lookup for imports, os.dirwalk takes flag to indicate not to recurse, bug fixes: args to new methods in modules broken, error messages on omitted 'new' keyword improved, 'delete' methods in modules could not be located
- changes to valgrind tests to exclude parsing, as spirit causes a gazillion errors (all complain an uninitialized variable is used) and i got tired of trying to constantly figure out the suppressions for them :(
- (re) implemented destructors ("delete" methods), which are called when objects leave scope and there are no remaining references to them

release 0.9.4
- new regex builtin module, 're'
- bug fixes: tracebacks didn't track calls properlyr; map/vector/class/instance
  types couldn't be used as booleans (in 'if' statements etc)
- added 'trace' command to devadb
- added builtin range() fcn and math module built-in round() function
- bug fixes: identifiers that began with keywords caused errors; debug 
  (line number) info caused break statements to fail
- added exit() built-in function
- added builtins: stdin(), stdout(), stderr() which return the objects they 
  are named after
- added stack underflow checking and stack "min-limit" checking (which is 
  enabled during eval() so that eval'd code can't blow the stack). added 
  relevant exceptions: DevaCriticalException (for non-recoverable errors) and 
  DevaStackException for stack exceptions

release 0.9.3
- numerous bug fixes, most importantly regarding the name look-up sequences.
  modules/imports should now work properly (or better at least!)
- (no-argument) constructors are now called on base-classes when a child-class
  is constructed.
- new 'local' keyword to define local variables. (necessary esp. for recursive
  code).
- built-in functions 'name' and 'type' added.
- rudimentary debugger (command-line) now included (devadb). includes basic
  support for stepping, breakpoints, viewing variables, instruction (byte-code)
  level stepping.

release 0.9.2
- slicing added. deva-language-1.0 doc updated to document it. test 47 added to
  test it.
- bug fixes: mixed dot-operator and indexers ('[]' op) were broken in several
  cases. added test cases as well (test 46).

release 0.9.1
- bug fixes: chained assignments generating bad code, function calls as
  conditions cause bad code gen
- (hopefully) builds correctly under Mac OS X 10.6 and Ubuntu/Debian

release 0.9.0
- first public release

