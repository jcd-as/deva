===========================================================

foo - + 4;
input.dv:2: error: Invalid statement
parse failed!
===========================================================
===========================================================

!fcn( x,y ) + z;
parsed successfully
In eval_expression. i->value = + i->children.size() = 3
add_op: +
	In eval_expression. i->value = ! i->children.size() = 1
	unary_op: !
		In eval_expression. i->value = fcn i->children.size() = 1
		identifier: fcn
			In eval_expression. i->value =  i->children.size() = 4
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = x i->children.size() = 0
				identifier: x
				In eval_expression. i->value = y i->children.size() = 0
				identifier: y
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
	In eval_expression. i->value = z i->children.size() = 0
	identifier: z
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

!fcn( x,y ) > z[fcn( a,b )];
parsed successfully
In eval_expression. i->value = > i->children.size() = 3
relational_op: >
	In eval_expression. i->value = ! i->children.size() = 1
	unary_op: !
		In eval_expression. i->value = fcn i->children.size() = 1
		identifier: fcn
			In eval_expression. i->value =  i->children.size() = 4
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = x i->children.size() = 0
				identifier: x
				In eval_expression. i->value = y i->children.size() = 0
				identifier: y
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
	In eval_expression. i->value = z i->children.size() = 1
	identifier: z
		In eval_expression. i->value =  i->children.size() = 3
		key_exp: 
			In eval_expression. i->value = [ i->children.size() = 0
			(open|close)_bracket_op: [
			In eval_expression. i->value = fcn i->children.size() = 1
			identifier: fcn
				In eval_expression. i->value =  i->children.size() = 4
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = a i->children.size() = 0
					identifier: a
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
			In eval_expression. i->value = ] i->children.size() = 0
			(open|close)_bracket_op: ]
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

x > y ;
parsed successfully
In eval_expression. i->value = > i->children.size() = 3
relational_op: >
	In eval_expression. i->value = x i->children.size() = 0
	identifier: x
	In eval_expression. i->value = y i->children.size() = 0
	identifier: y
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

y <= z;
parsed successfully
In eval_expression. i->value = <= i->children.size() = 3
relational_op: <=
	In eval_expression. i->value = y i->children.size() = 0
	identifier: y
	In eval_expression. i->value = z i->children.size() = 0
	identifier: z
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

z != a;
parsed successfully
In eval_expression. i->value = != i->children.size() = 3
relational_op: !=
	In eval_expression. i->value = z i->children.size() = 0
	identifier: z
	In eval_expression. i->value = a i->children.size() = 0
	identifier: a
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

a < b;
parsed successfully
In eval_expression. i->value = < i->children.size() = 3
relational_op: <
	In eval_expression. i->value = a i->children.size() = 0
	identifier: a
	In eval_expression. i->value = b i->children.size() = 0
	identifier: b
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

b == c       ;
parsed successfully
In eval_expression. i->value = == i->children.size() = 3
relational_op: ==
	In eval_expression. i->value = b i->children.size() = 0
	identifier: b
	In eval_expression. i->value = c i->children.size() = 0
	identifier: c
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

b == c || (4 + 2);
parsed successfully
In eval_expression. i->value = || i->children.size() = 3
logical_op: ||
	In eval_expression. i->value = == i->children.size() = 2
	relational_op: ==
		In eval_expression. i->value = b i->children.size() = 0
		identifier: b
		In eval_expression. i->value = c i->children.size() = 0
		identifier: c
	In eval_expression. i->value = + i->children.size() = 2
	add_op: +
		In eval_expression. i->value = 4 i->children.size() = 0
		num: 4
		In eval_expression. i->value = 2 i->children.size() = 0
		num: 2
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

(b( c ) && !a( b ));
parsed successfully
In eval_expression. i->value = && i->children.size() = 3
logical_op: &&
	In eval_expression. i->value = b i->children.size() = 1
	identifier: b
		In eval_expression. i->value =  i->children.size() = 3
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = c i->children.size() = 0
			identifier: c
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
	In eval_expression. i->value = ! i->children.size() = 1
	unary_op: !
		In eval_expression. i->value = a i->children.size() = 1
		identifier: a
			In eval_expression. i->value =  i->children.size() = 3
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = b i->children.size() = 0
				identifier: b
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

a = b;
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = a i->children.size() = 0
	identifier: a
	In eval_expression. i->value = b i->children.size() = 0
	identifier: b
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

(b( c ) && !a( b = c ));
parsed successfully
In eval_expression. i->value = && i->children.size() = 3
logical_op: &&
	In eval_expression. i->value = b i->children.size() = 1
	identifier: b
		In eval_expression. i->value =  i->children.size() = 3
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			(open|close)_paren_op: (
			In eval_expression. i->value = c i->children.size() = 0
			identifier: c
			In eval_expression. i->value = ) i->children.size() = 0
			(open|close)_paren_op: )
	In eval_expression. i->value = ! i->children.size() = 1
	unary_op: !
		In eval_expression. i->value = a i->children.size() = 1
		identifier: a
			In eval_expression. i->value =  i->children.size() = 3
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = = i->children.size() = 2
				assignment_op: =
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = c i->children.size() = 0
					identifier: c
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

foo = bar = goo;
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = = i->children.size() = 2
	assignment_op: =
		In eval_expression. i->value = foo i->children.size() = 0
		identifier: foo
		In eval_expression. i->value = bar i->children.size() = 0
		identifier: bar
	In eval_expression. i->value = goo i->children.size() = 0
	identifier: goo
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

(foo = bar = goo);
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = = i->children.size() = 2
	assignment_op: =
		In eval_expression. i->value = foo i->children.size() = 0
		identifier: foo
		In eval_expression. i->value = bar i->children.size() = 0
		identifier: bar
	In eval_expression. i->value = goo i->children.size() = 0
	identifier: goo
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

((foo = bar) = goo);
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = = i->children.size() = 2
	assignment_op: =
		In eval_expression. i->value = foo i->children.size() = 0
		identifier: foo
		In eval_expression. i->value = bar i->children.size() = 0
		identifier: bar
	In eval_expression. i->value = goo i->children.size() = 0
	identifier: goo
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

((foo + 4 = bar % 63.7e-1) = -goo);
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = = i->children.size() = 2
	assignment_op: =
		In eval_expression. i->value = + i->children.size() = 2
		add_op: +
			In eval_expression. i->value = foo i->children.size() = 0
			identifier: foo
			In eval_expression. i->value = 4 i->children.size() = 0
			num: 4
		In eval_expression. i->value = % i->children.size() = 2
		mult_op: %
			In eval_expression. i->value = bar i->children.size() = 0
			identifier: bar
			In eval_expression. i->value = 63.7e-1 i->children.size() = 0
			num: 63.7e-1
	In eval_expression. i->value = - i->children.size() = 1
	unary_op: -
		In eval_expression. i->value = goo i->children.size() = 0
		identifier: goo
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

((foo +  - 4 = bar % 63.7e-1) = -goo) = (b( c ) && !a( b ));
parsed successfully
In eval_expression. i->value = = i->children.size() = 3
assignment_op: =
	In eval_expression. i->value = = i->children.size() = 2
	assignment_op: =
		In eval_expression. i->value = = i->children.size() = 2
		assignment_op: =
			In eval_expression. i->value = + i->children.size() = 2
			add_op: +
				In eval_expression. i->value = foo i->children.size() = 0
				identifier: foo
				In eval_expression. i->value = - i->children.size() = 1
				unary_op: -
					In eval_expression. i->value = 4 i->children.size() = 0
					num: 4
			In eval_expression. i->value = % i->children.size() = 2
			mult_op: %
				In eval_expression. i->value = bar i->children.size() = 0
				identifier: bar
				In eval_expression. i->value = 63.7e-1 i->children.size() = 0
				num: 63.7e-1
		In eval_expression. i->value = - i->children.size() = 1
		unary_op: -
			In eval_expression. i->value = goo i->children.size() = 0
			identifier: goo
	In eval_expression. i->value = && i->children.size() = 2
	logical_op: &&
		In eval_expression. i->value = b i->children.size() = 1
		identifier: b
			In eval_expression. i->value =  i->children.size() = 3
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				(open|close)_paren_op: (
				In eval_expression. i->value = c i->children.size() = 0
				identifier: c
				In eval_expression. i->value = ) i->children.size() = 0
				(open|close)_paren_op: )
		In eval_expression. i->value = ! i->children.size() = 1
		unary_op: !
			In eval_expression. i->value = a i->children.size() = 1
			identifier: a
				In eval_expression. i->value =  i->children.size() = 3
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					(open|close)_paren_op: (
					In eval_expression. i->value = b i->children.size() = 0
					identifier: b
					In eval_expression. i->value = ) i->children.size() = 0
					(open|close)_paren_op: )
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

vec[(4+a)];
parsed successfully
In eval_expression. i->value = vec i->children.size() = 2
identifier: vec
	In eval_expression. i->value =  i->children.size() = 3
	key_exp: 
		In eval_expression. i->value = [ i->children.size() = 0
		(open|close)_bracket_op: [
		In eval_expression. i->value = + i->children.size() = 2
		add_op: +
			In eval_expression. i->value = 4 i->children.size() = 0
			num: 4
			In eval_expression. i->value = a i->children.size() = 0
			identifier: a
		In eval_expression. i->value = ] i->children.size() = 0
		(open|close)_bracket_op: ]
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

vec[
	3 +		2
/
	x] ;
parsed successfully
In eval_expression. i->value = vec i->children.size() = 2
identifier: vec
	In eval_expression. i->value =  i->children.size() = 3
	key_exp: 
		In eval_expression. i->value = [ i->children.size() = 0
		(open|close)_bracket_op: [
		In eval_expression. i->value = + i->children.size() = 2
		add_op: +
			In eval_expression. i->value = 3 i->children.size() = 0
			num: 3
			In eval_expression. i->value = / i->children.size() = 2
			mult_op: /
				In eval_expression. i->value = 2 i->children.size() = 0
				num: 2
				In eval_expression. i->value = x i->children.size() = 0
				identifier: x
		In eval_expression. i->value = ] i->children.size() = 0
		(open|close)_bracket_op: ]
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
===========================================================

"foo
bar" ;
parsed successfully
In eval_expression. i->value = "foo
bar" i->children.size() = 1
string: "foo
bar"
	In eval_expression. i->value = ; i->children.size() = 0
	semicolon_op: ;
===========================================================
total tests: 20
tests failed: 1
exiting...
