AST:
(Local a 0) (While (Condition true) (Block (Call ArgList (DOT_OP (DOT_OP (DOT_OP a b) c) d)))) (Call ArgList (DOT_OP (DOT_OP a b) c)) (Def x Arg_list_decl (Block (Call ArgList (DOT_OP (DOT_OP a b) c)))) <EOF>
Symbol table:
Function: @main, 0 arguments, 1 locals
	all names: local a; undeclared b; undeclared b; undeclared c; undeclared c; undeclared d; function x; 
	argument scope vars: local a; undeclared b; undeclared c; function x; 
Scope: 1
	vars: undeclared b; undeclared c; undeclared d; 
Function: x, 0 arguments, 0 locals
	all names: undeclared b; undeclared c; 
	argument scope vars: 
Scope: 3
	vars: undeclared b; undeclared c; 
Constant data pool:
<boolean-true>
<boolean-false>
<null-value>

__name__
__class__
__bases__
__module__
new
delete
self
rewind
next
print
str
chr
append
length
copy
name
type
exit
num
range
eval
open
close
flush
read
readstring
readline
readlines
write
writestring
writeline
writelines
seek
tell
stdin
stdout
stderr
format
join
error
seterror
geterror
importmodule
is_null
is_boolean
is_number
is_string
is_vector
is_map
is_function
is_native_function
is_class
is_instance
is_native_obj
is_size
is_symbol_name
concat
insert
remove
find
rfind
reverse
sort
slice
strip
lstrip
rstrip
split
replace
upper
lower
isalphanum
isalpha
isdigit
islower
isupper
isspace
ispunct
iscntrl
isprint
isxdigit
min
max
pop
count
map
filter
reduce
any
all
keys
values
merge
0
b
c
d
a
b
c
d
x
Function objects:
function: @main, from file: input.dv, line: 0
0 arg(s), default value indices: 
1 local(s): a 
code address: 0
function: x, from file: input.dv, line: 9
0 arg(s), default value indices: 
0 local(s): 
code address: 77
Instructions:
1
   0: push_zero		 
   1: def_local0		 
2
   2: push_true		 
   3: jmpf		40
   8: enter		 
4
   9: pushlocal0		 
  10: pushconst		98 (b)
  15: tbl_load	
  16: pushconst		99 (c)
  21: tbl_load	
  22: pushconst		100 (d)
  27: method_load	
  28: call_method		0
  33: pop		 
  34: leave		 
  35: jmp		2
7
  40: pushlocal0		 
  41: pushconst		98 (b)
  46: tbl_load	
  47: pushconst		99 (c)
  52: method_load	
  53: call_method		0
  58: pop		 
9
  59: def_function	3 105 ( # x), 77
  72: jmp		108
  77: enter		 
11
  78: pushconst		101 (a)
  83: pushconst		98 (b)
  88: tbl_load	
  89: pushconst		99 (c)
  94: method_load	
  95: call_method		0
 100: pop		 
 101: leave		 
 102: push_null		 
 103: return		0
 108: halt		 
