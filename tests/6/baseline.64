In eval_expression. i->value =  i->children.size() = 10
in scope 0, at line: -1
translation_unit: 
	In eval_expression. i->value = def i->children.size() = 3
	in scope 0, at line: 3
	func: def
		In eval_expression. i->value = foo i->children.size() = 0
		in scope 0, at line: 3
		identifier: foo
		In eval_expression. i->value =  i->children.size() = 4
		in scope 1, at line: 3
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 1, at line: 3
			(open|close)_paren_op: (
			In eval_expression. i->value = a i->children.size() = 0
			in scope 1, at line: 3
			identifier: a
			In eval_expression. i->value = b i->children.size() = 0
			in scope 1, at line: 3
			identifier: b
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 1, at line: 3
			(open|close)_paren_op: )
		In eval_expression. i->value = if i->children.size() = 3
		in scope 1, at line: 4
		if_s: if
			In eval_expression. i->value = a i->children.size() = 0
			in scope 2, at line: 5
			identifier: a
			In eval_expression. i->value = return i->children.size() = 2
			in scope 2, at line: 6
			return_statement: return
				In eval_expression. i->value = b i->children.size() = 0
				in scope 2, at line: 6
				identifier: b
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 2, at line: 6
				semicolon_op: ;
			In eval_expression. i->value = else i->children.size() = 1
			in scope 2, at line: 7
			else_s: else
				In eval_expression. i->value = if i->children.size() = 3
				in scope 2, at line: 7
				if_s: if
					In eval_expression. i->value = b i->children.size() = 0
					in scope 2, at line: 7
					identifier: b
					In eval_expression. i->value = return i->children.size() = 2
					in scope 2, at line: 8
					return_statement: return
						In eval_expression. i->value = a i->children.size() = 0
						in scope 2, at line: 8
						identifier: a
						In eval_expression. i->value = ; i->children.size() = 0
						in scope 2, at line: 8
						semicolon_op: ;
					In eval_expression. i->value = else i->children.size() = 1
					in scope 2, at line: 9
					else_s: else
						In eval_expression. i->value = return i->children.size() = 2
						in scope 2, at line: 10
						return_statement: return
							In eval_expression. i->value = 0 i->children.size() = 0
							in scope 3, at line: 11
							num: 0
							In eval_expression. i->value = ; i->children.size() = 0
							in scope 3, at line: 11
							semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 16
	assignment_op: =
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 16
		identifier: a
		In eval_expression. i->value =  i->children.size() = 0
		in scope 0, at line: 16
		vec_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 16
		semicolon_op: ;
	In eval_expression. i->value = . i->children.size() = 3
	in scope 0, at line: 17
	dot_op: .
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 17
		identifier: a
		In eval_expression. i->value = pushback i->children.size() = 1
		in scope 0, at line: 17
		identifier: pushback
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 17
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 0, at line: 17
				(open|close)_paren_op: (
				In eval_expression. i->value = 5 i->children.size() = 0
				in scope 0, at line: 17
				num: 5
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 0, at line: 17
				(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 17
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 21
	assignment_op: =
		In eval_expression. i->value = b i->children.size() = 0
		in scope 0, at line: 21
		identifier: b
		In eval_expression. i->value =  i->children.size() = 0
		in scope 0, at line: 21
		map_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 21
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 22
	assignment_op: =
		In eval_expression. i->value = b i->children.size() = 1
		in scope 0, at line: 22
		identifier: b
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 22
			key_exp: 
				In eval_expression. i->value = [ i->children.size() = 0
				in scope 0, at line: 22
				(open|close)_bracket_op: [
				In eval_expression. i->value = 0 i->children.size() = 0
				in scope 0, at line: 22
				num: 0
				In eval_expression. i->value = ] i->children.size() = 0
				in scope 0, at line: 22
				(open|close)_bracket_op: ]
		In eval_expression. i->value = "foo" i->children.size() = 0
		in scope 0, at line: 22
		string: "foo"
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 22
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 24
	assignment_op: =
		In eval_expression. i->value = b i->children.size() = 1
		in scope 0, at line: 24
		identifier: b
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 24
			key_exp: 
				In eval_expression. i->value = [ i->children.size() = 0
				in scope 0, at line: 24
				(open|close)_bracket_op: [
				In eval_expression. i->value = "foo" i->children.size() = 0
				in scope 0, at line: 24
				string: "foo"
				In eval_expression. i->value = ] i->children.size() = 0
				in scope 0, at line: 24
				(open|close)_bracket_op: ]
		In eval_expression. i->value = foo i->children.size() = 0
		in scope 0, at line: 24
		identifier: foo
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 24
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 28
	assignment_op: =
		In eval_expression. i->value = x i->children.size() = 0
		in scope 0, at line: 28
		identifier: x
		In eval_expression. i->value = b i->children.size() = 1
		in scope 0, at line: 28
		identifier: b
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 28
			key_exp: 
				In eval_expression. i->value = [ i->children.size() = 0
				in scope 0, at line: 28
				(open|close)_bracket_op: [
				In eval_expression. i->value = "foo" i->children.size() = 0
				in scope 0, at line: 28
				string: "foo"
				In eval_expression. i->value = ] i->children.size() = 0
				in scope 0, at line: 28
				(open|close)_bracket_op: ]
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 28
		semicolon_op: ;
	In eval_expression. i->value = x i->children.size() = 2
	in scope 0, at line: 29
	identifier: x
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 29
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 29
			(open|close)_paren_op: (
			In eval_expression. i->value = 0 i->children.size() = 0
			in scope 0, at line: 29
			num: 0
			In eval_expression. i->value = 1 i->children.size() = 0
			in scope 0, at line: 29
			num: 1
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 29
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 29
		semicolon_op: ;
	In eval_expression. i->value = for i->children.size() = 4
	in scope 0, at line: 31
	for_s: for
		In eval_expression. i->value = key i->children.size() = 0
		in scope 4, at line: 31
		identifier: key
		In eval_expression. i->value = value i->children.size() = 0
		in scope 4, at line: 31
		identifier: value
		In eval_expression. i->value = in i->children.size() = 1
		in scope 4, at line: 31
		in_op: in
			In eval_expression. i->value = b i->children.size() = 0
			in scope 4, at line: 31
			identifier: b
		In eval_expression. i->value = . i->children.size() = 3
		in scope 4, at line: 32
		dot_op: .
			In eval_expression. i->value = io i->children.size() = 0
			in scope 5, at line: 33
			identifier: io
			In eval_expression. i->value = print i->children.size() = 1
			in scope 5, at line: 33
			identifier: print
				In eval_expression. i->value =  i->children.size() = 3
				in scope 5, at line: 33
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					in scope 5, at line: 33
					(open|close)_paren_op: (
					In eval_expression. i->value = + i->children.size() = 2
					in scope 5, at line: 33
					add_op: +
						In eval_expression. i->value = str i->children.size() = 1
						in scope 5, at line: 33
						identifier: str
							In eval_expression. i->value =  i->children.size() = 3
							in scope 5, at line: 33
							arg_list_exp: 
								In eval_expression. i->value = ( i->children.size() = 0
								in scope 5, at line: 33
								(open|close)_paren_op: (
								In eval_expression. i->value = key i->children.size() = 0
								in scope 5, at line: 33
								identifier: key
								In eval_expression. i->value = ) i->children.size() = 0
								in scope 5, at line: 33
								(open|close)_paren_op: )
						In eval_expression. i->value = str i->children.size() = 1
						in scope 5, at line: 33
						identifier: str
							In eval_expression. i->value =  i->children.size() = 3
							in scope 5, at line: 33
							arg_list_exp: 
								In eval_expression. i->value = ( i->children.size() = 0
								in scope 5, at line: 33
								(open|close)_paren_op: (
								In eval_expression. i->value = value i->children.size() = 0
								in scope 5, at line: 33
								identifier: value
								In eval_expression. i->value = ) i->children.size() = 0
								in scope 5, at line: 33
								(open|close)_paren_op: )
					In eval_expression. i->value = ) i->children.size() = 0
					in scope 5, at line: 33
					(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			in scope 5, at line: 33
			semicolon_op: ;
	In eval_expression. i->value = while i->children.size() = 2
	in scope 0, at line: 36
	while_s: while
		In eval_expression. i->value = < i->children.size() = 2
		in scope 0, at line: 36
		relational_op: <
			In eval_expression. i->value = a i->children.size() = 0
			in scope 0, at line: 36
			identifier: a
			In eval_expression. i->value = 10 i->children.size() = 0
			in scope 0, at line: 36
			num: 10
		In eval_expression. i->value =  i->children.size() = 2
		in scope 0, at line: 37
		compound_statement: 
			In eval_expression. i->value = = i->children.size() = 3
			in scope 6, at line: 39
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				in scope 6, at line: 39
				identifier: a
				In eval_expression. i->value = + i->children.size() = 2
				in scope 6, at line: 39
				add_op: +
					In eval_expression. i->value = a i->children.size() = 0
					in scope 6, at line: 39
					identifier: a
					In eval_expression. i->value = 1 i->children.size() = 0
					in scope 6, at line: 39
					num: 1
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 6, at line: 39
				semicolon_op: ;
			In eval_expression. i->value = . i->children.size() = 3
			in scope 6, at line: 42
			dot_op: .
				In eval_expression. i->value = io i->children.size() = 0
				in scope 6, at line: 42
				identifier: io
				In eval_expression. i->value = print i->children.size() = 1
				in scope 6, at line: 42
				identifier: print
					In eval_expression. i->value =  i->children.size() = 3
					in scope 6, at line: 42
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						in scope 6, at line: 42
						(open|close)_paren_op: (
						In eval_expression. i->value = str i->children.size() = 1
						in scope 6, at line: 42
						identifier: str
							In eval_expression. i->value =  i->children.size() = 3
							in scope 6, at line: 42
							arg_list_exp: 
								In eval_expression. i->value = ( i->children.size() = 0
								in scope 6, at line: 42
								(open|close)_paren_op: (
								In eval_expression. i->value = a i->children.size() = 0
								in scope 6, at line: 42
								identifier: a
								In eval_expression. i->value = ) i->children.size() = 0
								in scope 6, at line: 42
								(open|close)_paren_op: )
						In eval_expression. i->value = ) i->children.size() = 0
						in scope 6, at line: 42
						(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 6, at line: 42
				semicolon_op: ;
Symbols:
Scope 0, parent = -1
	a
	b
	foo
	pushback
	x
Scope 1, parent = 0
	a
	b
Scope 2, parent = 1
Scope 3, parent = 2
Scope 4, parent = 0
	key
	value
Scope 5, parent = 4
	io
	print
	str
Scope 6, parent = 0
	io
	print
	str

Instructions:
line_num : string: '' = input.dv ; function: '', offset = 0 ; 
defun : function: 'foo', offset = 23 ; 
enter : 
defarg : unknown: 'a' ; 
defarg : unknown: 'b' ; 
defarg : 
push : unknown: 'a' ; 
jmpf : function: '', offset = 88 ; 
push : unknown: 'b' ; 
return : 
jmp : function: '', offset = 138 ; 
push : unknown: 'b' ; 
jmpf : function: '', offset = 124 ; 
push : unknown: 'a' ; 
return : 
jmp : function: '', offset = 138 ; 
push : num: '' = 0 ; 
return : 
push : unknown: 'a' ; 
new_vec: : 
push : function: '', offset = 211 ; 
push : num: '' = 5 ; 
push : unknown: 'a' ; 
push : string: '' = pushback ; 
tbl_load : boolean: '' = 0 ; 
call : function: '', offset = 1 ; 
pop : 
push : unknown: 'b' ; 
new_map: : 
push : unknown: 'b' ; 
push : num: '' = 0 ; 
push : string: '' = foo ; 
tbl_store : 
push : unknown: 'b' ; 
push : string: '' = foo ; 
push : unknown: 'foo' ; 
tbl_store : 
push : unknown: 'x' ; 
push : unknown: 'b' ; 
push : string: '' = foo ; 
tbl_load : 
store : 
push : function: '', offset = 342 ; 
push : num: '' = 1 ; 
push : num: '' = 0 ; 
call : function_call: 'x' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 344 ; 
push : unknown: 'b' ; 
call : function_call: 'length' ; function: '', offset = 1 ; 
push : num: '' = 0 ; 
dup : num: '' = 1 ; 
dup : num: '' = 1 ; 
neq : 
jmpf : function: '', offset = 640 ; 
push : unknown: 'b' ; 
dup : num: '' = 1 ; 
tbl_load : boolean: '' = 1 ; 
push : unknown: 'key' ; 
swap : 
store : 
push : unknown: 'value' ; 
swap : 
store : 
push : function: '', offset = 612 ; 
push : function: '', offset = 532 ; 
push : unknown: 'key' ; 
call : function_call: 'str' ; function: '', offset = 1 ; 
push : function: '', offset = 570 ; 
push : unknown: 'value' ; 
call : function_call: 'str' ; function: '', offset = 1 ; 
add : 
push : unknown: 'io' ; 
push : string: '' = print ; 
tbl_load : boolean: '' = 0 ; 
call : function: '', offset = 1 ; 
pop : 
push : num: '' = 1 ; 
add : 
jmp : function: '', offset = 393 ; 
pop : 
pop : 
push : unknown: 'a' ; 
push : num: '' = 10 ; 
lt : 
jmpf : function: '', offset = 805 ; 
enter : 
push : unknown: 'a' ; 
push : unknown: 'a' ; 
push : num: '' = 1 ; 
add : 
store : 
push : function: '', offset = 789 ; 
push : function: '', offset = 749 ; 
push : unknown: 'a' ; 
call : function_call: 'str' ; function: '', offset = 1 ; 
push : unknown: 'io' ; 
push : string: '' = print ; 
tbl_load : boolean: '' = 0 ; 
call : function: '', offset = 1 ; 
pop : 
leave : 
jmp : function: '', offset = 644 ; 
halt : 
compiled input.dv successfully
