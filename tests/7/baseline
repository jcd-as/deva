AST:
(Local a 0) (While (Condition a) (Block (ASSIGN_OP a 0) (Local b 1))) (While (Condition a) (Block (ASSIGN_OP a 0))) (Def foo (Arg_list_decl (Def_arg a) (Def_arg b) (Def_arg c)) Block) (Local x 1) (Local y 0) (Def z Arg_list_decl Block) (If (Condition x) (Block (If (Condition y) (Block (Call ArgList z))))) (If (Condition x) (Block (If (Condition y) (Block (Call ArgList z))) (Local b 1) (ASSIGN_OP a b))) (If (Condition x) Block (Else Block)) (Def fcn Arg_list_decl (Block (Call (ArgList "fcn called") print))) (ASSIGN_OP a (Map_init (Pair "b" fcn))) (Call ArgList (DOT_OP a b)) (ASSIGN_OP (DOT_OP a b) (Map_init (Pair "c" (Map_init (Pair "d" 1))))) (ASSIGN_OP (DOT_OP (DOT_OP (DOT_OP a b) c) d) 0) (ASSIGN_OP (DOT_OP (DOT_OP (DOT_OP a b) c) d) Map_init) (ASSIGN_OP (Key (DOT_OP (DOT_OP (DOT_OP a b) c) d) "foo") 1) (ASSIGN_OP a 1) (Local n (/ (+ 5 5) 2)) (ASSIGN_OP n (+ (% (* 2 2) 3) 1)) <EOF>
Symbol table:
Function: @main, 0 arguments, 6 locals
	all names: local a; undeclared b; local b; local b; function fcn; function foo; local n; local x; local y; function z; 
	argument scope vars: local a; undeclared b; function fcn; function foo; local n; local x; local y; function z; 
Scope: 1
	vars: local b; 
Scope: 2
	vars: 
Function: foo, 3 arguments, 3 locals
	all names: argument a; argument b; argument c; 
	argument scope vars: argument a; argument b; argument c; 
Scope: 4
	vars: 
Function: z, 0 arguments, 0 locals
	all names: 
	argument scope vars: 
Scope: 6
	vars: 
Scope: 7
	vars: 
Scope: 8
	vars: 
Scope: 9
	vars: local b; 
Scope: 10
	vars: 
Scope: 11
	vars: 
Scope: 12
	vars: 
Function: fcn, 0 arguments, 0 locals
	all names: 
	argument scope vars: 
Scope: 14
	vars: 
Constant data pool:
<boolean-true>
<boolean-false>
<null-value>

__name__
__class__
__bases__
__module__
new
delete
self
rewind
next
print
str
chr
append
length
copy
name
type
exit
num
range
eval
open
close
flush
read
readstring
readline
readlines
write
writestring
writeline
writelines
seek
tell
stdin
stdout
stderr
format
join
error
seterror
geterror
importmodule
concat
insert
remove
find
rfind
reverse
sort
slice
strip
lstrip
rstrip
split
replace
upper
lower
isalphanum
isalpha
isdigit
islower
isupper
isspace
ispunct
iscntrl
isprint
isxdigit
min
max
pop
count
map
filter
reduce
any
all
keys
values
merge
0
1
2
3
5
b
c
d
fcn called
foo
foo
a
b
c
fcn
n
x
y
z
Function objects:
function: @main, from file: input.dv, line: 0
0 arg(s), default value indices: 
6 local(s): a b x y b n 
code address: 0
function: fcn, from file: input.dv, line: 102
0 arg(s), default value indices: 
0 local(s): 
code address: 181
function: foo, from file: input.dv, line: 34
3 arg(s), default value indices: 
3 local(s): a b c 
code address: 52
function: z, from file: input.dv, line: 40
0 arg(s), default value indices: 
0 local(s): 
code address: 82
Instructions:
1
   0: push_zero		 
   1: def_local0		 
2
   2: pushlocal0		 
   3: jmpf		19
   8: enter		 
4
   9: push_zero		 
  10: storelocal0		 
5
  11: push_one		 
  12: def_local1		 
  13: leave		 
  14: jmp		2
21
  19: pushlocal0		 
  20: jmpf		34
  25: enter		 
23
  26: push_zero		 
  27: storelocal0		 
  28: leave		 
  29: jmp		19
34
  34: def_function	3 94 ( # foo), 52
  47: jmp		60
  52: enter		 
  53: leave		 
  54: push_null		 
  55: return		0
38
  60: push_one		 
  61: def_local2		 
39
  62: push_zero		 
  63: def_local3		 
40
  64: def_function	3 102 ( # z), 82
  77: jmp		90
  82: enter		 
  83: leave		 
  84: push_null		 
  85: return		0
41
  90: pushlocal2		 
  91: jmpf		117
  96: enter		 
43
  97: pushlocal3		 
  98: jmpf		116
 103: enter		 
45
 104: pushconst		102 (z)
 109: call		0
 114: pop		 
 115: leave		 
 116: leave		 
57
 117: pushlocal2		 
 118: jmpf		148
 123: enter		 
59
 124: pushlocal3		 
 125: jmpf		143
 130: enter		 
61
 131: pushconst		102 (z)
 136: call		0
 141: pop		 
 142: leave		 
63
 143: push_one		 
 144: def_local4		 
64
 145: pushlocal4		 
 146: storelocal0		 
 147: leave		 
80
 148: pushlocal2		 
 149: jmpf		161
 154: enter		 
 155: leave		 
 156: jmp		163
 161: enter		 
 162: leave		 
102
 163: def_function	3 98 ( # fcn), 181
 176: jmp		205
 181: enter		 
 182: pushconst		92 (fcn called)
 187: pushconst		13 (print)
 192: call		1
 197: pop		 
 198: leave		 
 199: push_null		 
 200: return		0
103
 205: pushconst		89 (b)
 210: pushconst		98 (fcn)
 215: new_map		1
 220: storelocal0		 
104
 221: pushlocal0		 
 222: pushconst		89 (b)
 227: method_load	
 228: call_method		0
 233: pop		 
105
 234: pushlocal0		 
 235: pushconst		89 (b)
 240: pushconst		90 (c)
 245: pushconst		91 (d)
 250: push_one		 
 251: new_map		1
 256: new_map		1
 261: tbl_store	
106
 262: pushlocal0		 
 263: pushconst		89 (b)
 268: tbl_load	
 269: pushconst		90 (c)
 274: tbl_load	
 275: pushconst		91 (d)
 280: push_zero		 
 281: tbl_store	
107
 282: pushlocal0		 
 283: pushconst		89 (b)
 288: tbl_load	
 289: pushconst		90 (c)
 294: tbl_load	
 295: pushconst		91 (d)
0
 300: new_map		0
 305: tbl_store	
108
 306: pushlocal0		 
 307: pushconst		89 (b)
 312: tbl_load	
 313: pushconst		90 (c)
 318: tbl_load	
 319: pushconst		91 (d)
 324: tbl_load	
 325: pushconst		93 (foo)
 330: push_one		 
 331: tbl_store	
116
 332: push_one		 
 333: storelocal0		 
121
 334: push		5
 339: push		5
 344: add		 
 345: push		2
 350: div		 
 351: def_local5		 
126
 352: push		2
 357: push		2
 362: mul		 
 363: push		3
 368: mod		 
 369: push_one		 
 370: add		 
 371: storelocal5		 
 372: halt		 
