In eval_expression. i->value =  i->children.size() = 14
in scope 0, at line: -1
translation_unit: 
	In eval_expression. i->value = while i->children.size() = 2
	in scope 0, at line: 1
	while_s: while
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 1
		identifier: a
		In eval_expression. i->value =  i->children.size() = 2
		in scope 0, at line: 2
		compound_statement: 
			In eval_expression. i->value = = i->children.size() = 3
			in scope 1, at line: 3
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				in scope 1, at line: 3
				identifier: a
				In eval_expression. i->value = 0 i->children.size() = 0
				in scope 1, at line: 3
				num: 0
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 1, at line: 3
				semicolon_op: ;
			In eval_expression. i->value = = i->children.size() = 3
			in scope 1, at line: 4
			assignment_op: =
				In eval_expression. i->value = b i->children.size() = 0
				in scope 1, at line: 4
				identifier: b
				In eval_expression. i->value = 1 i->children.size() = 0
				in scope 1, at line: 4
				num: 1
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 1, at line: 4
				semicolon_op: ;
	In eval_expression. i->value = while i->children.size() = 2
	in scope 0, at line: 20
	while_s: while
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 20
		identifier: a
		In eval_expression. i->value = = i->children.size() = 3
		in scope 0, at line: 21
		assignment_op: =
			In eval_expression. i->value = a i->children.size() = 0
			in scope 2, at line: 22
			identifier: a
			In eval_expression. i->value = 0 i->children.size() = 0
			in scope 2, at line: 22
			num: 0
			In eval_expression. i->value = ; i->children.size() = 0
			in scope 2, at line: 22
			semicolon_op: ;
	In eval_expression. i->value = def i->children.size() = 3
	in scope 0, at line: 33
	func: def
		In eval_expression. i->value = foo i->children.size() = 0
		in scope 0, at line: 33
		identifier: foo
		In eval_expression. i->value =  i->children.size() = 5
		in scope 3, at line: 33
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 3, at line: 33
			(open|close)_paren_op: (
			In eval_expression. i->value = a i->children.size() = 0
			in scope 3, at line: 33
			identifier: a
			In eval_expression. i->value = b i->children.size() = 0
			in scope 3, at line: 33
			identifier: b
			In eval_expression. i->value = c i->children.size() = 0
			in scope 3, at line: 33
			identifier: c
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 3, at line: 33
			(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 0
		in scope 3, at line: 34
		compound_statement: 
	In eval_expression. i->value = if i->children.size() = 2
	in scope 0, at line: 37
	if_s: if
		In eval_expression. i->value = x i->children.size() = 0
		in scope 0, at line: 37
		identifier: x
		In eval_expression. i->value = if i->children.size() = 2
		in scope 0, at line: 38
		if_s: if
			In eval_expression. i->value = y i->children.size() = 0
			in scope 5, at line: 39
			identifier: y
			In eval_expression. i->value = z i->children.size() = 2
			in scope 5, at line: 40
			identifier: z
				In eval_expression. i->value =  i->children.size() = 2
				in scope 6, at line: 41
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					in scope 6, at line: 41
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					in scope 6, at line: 41
					(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 6, at line: 41
				semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 2
	in scope 0, at line: 53
	if_s: if
		In eval_expression. i->value = x i->children.size() = 0
		in scope 0, at line: 53
		identifier: x
		In eval_expression. i->value =  i->children.size() = 2
		in scope 0, at line: 54
		compound_statement: 
			In eval_expression. i->value = if i->children.size() = 2
			in scope 7, at line: 55
			if_s: if
				In eval_expression. i->value = y i->children.size() = 0
				in scope 7, at line: 55
				identifier: y
				In eval_expression. i->value = z i->children.size() = 2
				in scope 7, at line: 56
				identifier: z
					In eval_expression. i->value =  i->children.size() = 2
					in scope 8, at line: 57
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						in scope 8, at line: 57
						(open|close)_paren_op: (
						In eval_expression. i->value = ) i->children.size() = 0
						in scope 8, at line: 57
						(open|close)_paren_op: )
					In eval_expression. i->value = ; i->children.size() = 0
					in scope 8, at line: 57
					semicolon_op: ;
			In eval_expression. i->value = = i->children.size() = 3
			in scope 7, at line: 59
			assignment_op: =
				In eval_expression. i->value = a i->children.size() = 0
				in scope 7, at line: 59
				identifier: a
				In eval_expression. i->value = b i->children.size() = 0
				in scope 7, at line: 59
				identifier: b
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 7, at line: 59
				semicolon_op: ;
	In eval_expression. i->value = if i->children.size() = 3
	in scope 0, at line: 74
	if_s: if
		In eval_expression. i->value = x i->children.size() = 0
		in scope 0, at line: 74
		identifier: x
		In eval_expression. i->value = y i->children.size() = 1
		in scope 0, at line: 75
		identifier: y
			In eval_expression. i->value = ; i->children.size() = 0
			in scope 9, at line: 76
			semicolon_op: ;
		In eval_expression. i->value = else i->children.size() = 1
		in scope 0, at line: 78
		else_s: else
			In eval_expression. i->value = z i->children.size() = 1
			in scope 0, at line: 79
			identifier: z
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 10, at line: 80
				semicolon_op: ;
	In eval_expression. i->value = . i->children.size() = 3
	in scope 0, at line: 98
	dot_op: .
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 98
		identifier: a
		In eval_expression. i->value = b i->children.size() = 1
		in scope 0, at line: 98
		identifier: b
			In eval_expression. i->value =  i->children.size() = 2
			in scope 0, at line: 98
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 0, at line: 98
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 0, at line: 98
				(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 98
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 99
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		in scope 0, at line: 99
		dot_op: .
			In eval_expression. i->value = . i->children.size() = 2
			in scope 0, at line: 99
			dot_op: .
				In eval_expression. i->value = . i->children.size() = 2
				in scope 0, at line: 99
				dot_op: .
					In eval_expression. i->value = a i->children.size() = 0
					in scope 0, at line: 99
					identifier: a
					In eval_expression. i->value = b i->children.size() = 0
					in scope 0, at line: 99
					identifier: b
				In eval_expression. i->value = c i->children.size() = 0
				in scope 0, at line: 99
				identifier: c
			In eval_expression. i->value = d i->children.size() = 0
			in scope 0, at line: 99
			identifier: d
		In eval_expression. i->value = 0 i->children.size() = 0
		in scope 0, at line: 99
		num: 0
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 99
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 100
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		in scope 0, at line: 100
		dot_op: .
			In eval_expression. i->value = . i->children.size() = 2
			in scope 0, at line: 100
			dot_op: .
				In eval_expression. i->value = . i->children.size() = 2
				in scope 0, at line: 100
				dot_op: .
					In eval_expression. i->value = a i->children.size() = 0
					in scope 0, at line: 100
					identifier: a
					In eval_expression. i->value = b i->children.size() = 0
					in scope 0, at line: 100
					identifier: b
				In eval_expression. i->value = c i->children.size() = 0
				in scope 0, at line: 100
				identifier: c
			In eval_expression. i->value = d i->children.size() = 1
			in scope 0, at line: 100
			identifier: d
				In eval_expression. i->value =  i->children.size() = 3
				in scope 0, at line: 100
				key_exp: 
					In eval_expression. i->value = [ i->children.size() = 0
					in scope 0, at line: 100
					(open|close)_bracket_op: [
					In eval_expression. i->value = "foo" i->children.size() = 0
					in scope 0, at line: 100
					string: "foo"
					In eval_expression. i->value = ] i->children.size() = 0
					in scope 0, at line: 100
					(open|close)_bracket_op: ]
		In eval_expression. i->value = 1 i->children.size() = 0
		in scope 0, at line: 100
		num: 1
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 100
		semicolon_op: ;
	In eval_expression. i->value = . i->children.size() = 3
	in scope 0, at line: 101
	dot_op: .
		In eval_expression. i->value = a i->children.size() = 1
		in scope 0, at line: 101
		identifier: a
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 101
			key_exp: 
				In eval_expression. i->value = [ i->children.size() = 0
				in scope 0, at line: 101
				(open|close)_bracket_op: [
				In eval_expression. i->value = b i->children.size() = 0
				in scope 0, at line: 101
				identifier: b
				In eval_expression. i->value = ] i->children.size() = 0
				in scope 0, at line: 101
				(open|close)_bracket_op: ]
		In eval_expression. i->value = c i->children.size() = 1
		in scope 0, at line: 101
		identifier: c
			In eval_expression. i->value =  i->children.size() = 2
			in scope 0, at line: 101
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 0, at line: 101
				(open|close)_paren_op: (
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 0, at line: 101
				(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 101
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 102
	assignment_op: =
		In eval_expression. i->value = . i->children.size() = 2
		in scope 0, at line: 102
		dot_op: .
			In eval_expression. i->value = a i->children.size() = 1
			in scope 0, at line: 102
			identifier: a
				In eval_expression. i->value =  i->children.size() = 2
				in scope 0, at line: 102
				arg_list_exp: 
					In eval_expression. i->value = ( i->children.size() = 0
					in scope 0, at line: 102
					(open|close)_paren_op: (
					In eval_expression. i->value = ) i->children.size() = 0
					in scope 0, at line: 102
					(open|close)_paren_op: )
			In eval_expression. i->value = b i->children.size() = 0
			in scope 0, at line: 102
			identifier: b
		In eval_expression. i->value = 2 i->children.size() = 0
		in scope 0, at line: 102
		num: 2
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 102
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 107
	assignment_op: =
		In eval_expression. i->value = a i->children.size() = 0
		in scope 0, at line: 107
		identifier: a
		In eval_expression. i->value = 1 i->children.size() = 0
		in scope 0, at line: 107
		num: 1
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 107
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 112
	assignment_op: =
		In eval_expression. i->value = n i->children.size() = 0
		in scope 0, at line: 112
		identifier: n
		In eval_expression. i->value = / i->children.size() = 2
		in scope 0, at line: 112
		mult_op: /
			In eval_expression. i->value = + i->children.size() = 2
			in scope 0, at line: 112
			add_op: +
				In eval_expression. i->value = 5 i->children.size() = 0
				in scope 0, at line: 112
				num: 5
				In eval_expression. i->value = 5 i->children.size() = 0
				in scope 0, at line: 112
				num: 5
			In eval_expression. i->value = 2 i->children.size() = 0
			in scope 0, at line: 112
			num: 2
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 112
		semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 117
	assignment_op: =
		In eval_expression. i->value = n i->children.size() = 0
		in scope 0, at line: 117
		identifier: n
		In eval_expression. i->value = + i->children.size() = 2
		in scope 0, at line: 117
		add_op: +
			In eval_expression. i->value = % i->children.size() = 2
			in scope 0, at line: 117
			mult_op: %
				In eval_expression. i->value = * i->children.size() = 2
				in scope 0, at line: 117
				mult_op: *
					In eval_expression. i->value = 2 i->children.size() = 0
					in scope 0, at line: 117
					num: 2
					In eval_expression. i->value = 2 i->children.size() = 0
					in scope 0, at line: 117
					num: 2
				In eval_expression. i->value = 3 i->children.size() = 0
				in scope 0, at line: 117
				num: 3
			In eval_expression. i->value = 1 i->children.size() = 0
			in scope 0, at line: 117
			num: 1
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 117
		semicolon_op: ;
Symbols:
Scope 0, parent = -1
	a
	b
	c
	d
	foo
	n
	x
Scope 1, parent = 0
	b
Scope 2, parent = 0
Scope 3, parent = 0
	b
	c
Scope 4, parent = 3
Scope 5, parent = 0
	y
Scope 6, parent = 5
	z
Scope 7, parent = 0
	b
	y
Scope 8, parent = 7
	z
Scope 9, parent = 0
	y
Scope 10, parent = 0
	z

Instructions:
line_num : input.dv ; , address/sized-value = 0 ; 
push : unknown: 'a' ; 
jmpf : , address/sized-value = 82 ; 
enter : 
push : unknown: 'a' ; 
push : 0 ; 
store : 
push : unknown: 'b' ; 
push : 1 ; 
store : 
leave : 
jmp : , address/sized-value = 19 ; 
push : unknown: 'a' ; 
jmpf : , address/sized-value = 126 ; 
enter : 
push : unknown: 'a' ; 
push : 0 ; 
store : 
leave : 
jmp : , address/sized-value = 82 ; 
defun : foo, address/sized-value = 126 ; 
enter : 
defarg : unknown: 'a' ; 
defarg : unknown: 'b' ; 
defarg : unknown: 'c' ; 
defarg : 
push : null ; 
return : 
endf : 
push : unknown: 'x' ; 
jmpf : , address/sized-value = 242 ; 
enter : 
push : unknown: 'y' ; 
jmpf : , address/sized-value = 240 ; 
enter : 
push : , address/sized-value = 236 ; 
line_num : input.dv ; , address/sized-value = 40 ; 
call : function_call: 'z' ; , address/sized-value = 0 ; 
pop : 
leave : 
leave : 
push : unknown: 'x' ; 
jmpf : , address/sized-value = 328 ; 
enter : 
push : unknown: 'y' ; 
jmpf : , address/sized-value = 314 ; 
enter : 
push : , address/sized-value = 310 ; 
line_num : input.dv ; , address/sized-value = 56 ; 
call : function_call: 'z' ; , address/sized-value = 0 ; 
pop : 
leave : 
push : unknown: 'a' ; 
push : unknown: 'b' ; 
store : 
leave : 
push : unknown: 'x' ; 
jmpf : , address/sized-value = 353 ; 
enter : 
leave : 
jmp : , address/sized-value = 357 ; 
enter : 
leave : 
push : , address/sized-value = 411 ; 
push : unknown: 'a' ; 
push : b ; 
tbl_load : false ; 
line_num : input.dv ; , address/sized-value = 98 ; 
call : , address/sized-value = 0 ; 
pop : 
push : unknown: 'a' ; 
push : b ; 
tbl_load : 
push : c ; 
tbl_load : 
push : d ; 
push : 0 ; 
tbl_store : 
push : unknown: 'a' ; 
push : b ; 
tbl_load : 
push : c ; 
tbl_load : 
push : d ; 
tbl_load : 
push : foo ; 
push : 1 ; 
tbl_store : 
push : , address/sized-value = 572 ; 
push : unknown: 'a' ; 
push : unknown: 'b' ; 
tbl_load : , address/sized-value = 1 ; 
push : c ; 
tbl_load : false ; 
line_num : input.dv ; , address/sized-value = 101 ; 
call : , address/sized-value = 0 ; 
pop : 
push : , address/sized-value = 612 ; 
line_num : input.dv ; , address/sized-value = 102 ; 
call : function_call: 'a' ; , address/sized-value = 0 ; 
push : b ; 
push : 2 ; 
tbl_store : 
push : unknown: 'a' ; 
push : 1 ; 
store : 
push : unknown: 'n' ; 
push : 5 ; 
push : 5 ; 
add : 
push : 2 ; 
div : 
store : 
push : unknown: 'n' ; 
push : 2 ; 
push : 2 ; 
mul : 
push : 3 ; 
mod : 
push : 1 ; 
add : 
store : 
halt : 
compiled input.dv successfully
