In eval_expression. i->value =  i->children.size() = 17
in scope 0, at line: -1
translation_unit: 
	In eval_expression. i->value = def i->children.size() = 3
	in scope 0, at line: 4
	func: def
		In eval_expression. i->value = bubble_sort i->children.size() = 0
		in scope 0, at line: 4
		identifier: bubble_sort
		In eval_expression. i->value =  i->children.size() = 3
		in scope 1, at line: 4
		arg_list_decl: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 1, at line: 4
			(open|close)_paren_op: (
			In eval_expression. i->value = a i->children.size() = 0
			in scope 1, at line: 4
			identifier: a
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 1, at line: 4
			(open|close)_paren_op: )
		In eval_expression. i->value =  i->children.size() = 4
		in scope 1, at line: 5
		compound_statement: 
			In eval_expression. i->value = = i->children.size() = 3
			in scope 2, at line: 6
			assignment_op: =
				In eval_expression. i->value = len i->children.size() = 0
				in scope 2, at line: 6
				identifier: len
				In eval_expression. i->value = length i->children.size() = 1
				in scope 2, at line: 6
				identifier: length
					In eval_expression. i->value =  i->children.size() = 3
					in scope 2, at line: 6
					arg_list_exp: 
						In eval_expression. i->value = ( i->children.size() = 0
						in scope 2, at line: 6
						(open|close)_paren_op: (
						In eval_expression. i->value = a i->children.size() = 0
						in scope 2, at line: 6
						identifier: a
						In eval_expression. i->value = ) i->children.size() = 0
						in scope 2, at line: 6
						(open|close)_paren_op: )
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 2, at line: 6
				semicolon_op: ;
			In eval_expression. i->value = = i->children.size() = 3
			in scope 2, at line: 7
			assignment_op: =
				In eval_expression. i->value = swap i->children.size() = 0
				in scope 2, at line: 7
				identifier: swap
				In eval_expression. i->value = true i->children.size() = 0
				in scope 2, at line: 7
				boolean: true
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 2, at line: 7
				semicolon_op: ;
			In eval_expression. i->value = while i->children.size() = 2
			in scope 2, at line: 8
			while_s: while
				In eval_expression. i->value = swap i->children.size() = 0
				in scope 2, at line: 8
				identifier: swap
				In eval_expression. i->value =  i->children.size() = 3
				in scope 2, at line: 9
				compound_statement: 
					In eval_expression. i->value = = i->children.size() = 3
					in scope 3, at line: 10
					assignment_op: =
						In eval_expression. i->value = swap i->children.size() = 0
						in scope 3, at line: 10
						identifier: swap
						In eval_expression. i->value = false i->children.size() = 0
						in scope 3, at line: 10
						boolean: false
						In eval_expression. i->value = ; i->children.size() = 0
						in scope 3, at line: 10
						semicolon_op: ;
					In eval_expression. i->value = = i->children.size() = 3
					in scope 3, at line: 11
					assignment_op: =
						In eval_expression. i->value = i i->children.size() = 0
						in scope 3, at line: 11
						identifier: i
						In eval_expression. i->value = - i->children.size() = 2
						in scope 3, at line: 11
						add_op: -
							In eval_expression. i->value = len i->children.size() = 0
							in scope 3, at line: 11
							identifier: len
							In eval_expression. i->value = 1 i->children.size() = 0
							in scope 3, at line: 11
							num: 1
						In eval_expression. i->value = ; i->children.size() = 0
						in scope 3, at line: 11
						semicolon_op: ;
					In eval_expression. i->value = while i->children.size() = 2
					in scope 3, at line: 12
					while_s: while
						In eval_expression. i->value = >= i->children.size() = 2
						in scope 3, at line: 12
						relational_op: >=
							In eval_expression. i->value = i i->children.size() = 0
							in scope 3, at line: 12
							identifier: i
							In eval_expression. i->value = 0 i->children.size() = 0
							in scope 3, at line: 12
							num: 0
						In eval_expression. i->value =  i->children.size() = 3
						in scope 3, at line: 13
						compound_statement: 
							In eval_expression. i->value = = i->children.size() = 3
							in scope 4, at line: 14
							assignment_op: =
								In eval_expression. i->value = j i->children.size() = 0
								in scope 4, at line: 14
								identifier: j
								In eval_expression. i->value = 1 i->children.size() = 0
								in scope 4, at line: 14
								num: 1
								In eval_expression. i->value = ; i->children.size() = 0
								in scope 4, at line: 14
								semicolon_op: ;
							In eval_expression. i->value = while i->children.size() = 2
							in scope 4, at line: 15
							while_s: while
								In eval_expression. i->value = <= i->children.size() = 2
								in scope 4, at line: 15
								relational_op: <=
									In eval_expression. i->value = j i->children.size() = 0
									in scope 4, at line: 15
									identifier: j
									In eval_expression. i->value = i i->children.size() = 0
									in scope 4, at line: 15
									identifier: i
								In eval_expression. i->value =  i->children.size() = 2
								in scope 4, at line: 16
								compound_statement: 
									In eval_expression. i->value = if i->children.size() = 2
									in scope 5, at line: 17
									if_s: if
										In eval_expression. i->value = > i->children.size() = 2
										in scope 5, at line: 17
										relational_op: >
											In eval_expression. i->value = a i->children.size() = 1
											in scope 5, at line: 17
											identifier: a
												In eval_expression. i->value =  i->children.size() = 3
												in scope 5, at line: 17
												key_exp: 
													In eval_expression. i->value = [ i->children.size() = 0
													in scope 5, at line: 17
													(open|close)_bracket_op: [
													In eval_expression. i->value = - i->children.size() = 2
													in scope 5, at line: 17
													add_op: -
														In eval_expression. i->value = j i->children.size() = 0
														in scope 5, at line: 17
														identifier: j
														In eval_expression. i->value = 1 i->children.size() = 0
														in scope 5, at line: 17
														num: 1
													In eval_expression. i->value = ] i->children.size() = 0
													in scope 5, at line: 17
													(open|close)_bracket_op: ]
											In eval_expression. i->value = a i->children.size() = 1
											in scope 5, at line: 17
											identifier: a
												In eval_expression. i->value =  i->children.size() = 3
												in scope 5, at line: 17
												key_exp: 
													In eval_expression. i->value = [ i->children.size() = 0
													in scope 5, at line: 17
													(open|close)_bracket_op: [
													In eval_expression. i->value = j i->children.size() = 0
													in scope 5, at line: 17
													identifier: j
													In eval_expression. i->value = ] i->children.size() = 0
													in scope 5, at line: 17
													(open|close)_bracket_op: ]
										In eval_expression. i->value =  i->children.size() = 4
										in scope 5, at line: 18
										compound_statement: 
											In eval_expression. i->value = = i->children.size() = 3
											in scope 6, at line: 19
											assignment_op: =
												In eval_expression. i->value = temp i->children.size() = 0
												in scope 6, at line: 19
												identifier: temp
												In eval_expression. i->value = a i->children.size() = 1
												in scope 6, at line: 19
												identifier: a
													In eval_expression. i->value =  i->children.size() = 3
													in scope 6, at line: 19
													key_exp: 
														In eval_expression. i->value = [ i->children.size() = 0
														in scope 6, at line: 19
														(open|close)_bracket_op: [
														In eval_expression. i->value = - i->children.size() = 2
														in scope 6, at line: 19
														add_op: -
															In eval_expression. i->value = j i->children.size() = 0
															in scope 6, at line: 19
															identifier: j
															In eval_expression. i->value = 1 i->children.size() = 0
															in scope 6, at line: 19
															num: 1
														In eval_expression. i->value = ] i->children.size() = 0
														in scope 6, at line: 19
														(open|close)_bracket_op: ]
												In eval_expression. i->value = ; i->children.size() = 0
												in scope 6, at line: 19
												semicolon_op: ;
											In eval_expression. i->value = = i->children.size() = 3
											in scope 6, at line: 20
											assignment_op: =
												In eval_expression. i->value = a i->children.size() = 1
												in scope 6, at line: 20
												identifier: a
													In eval_expression. i->value =  i->children.size() = 3
													in scope 6, at line: 20
													key_exp: 
														In eval_expression. i->value = [ i->children.size() = 0
														in scope 6, at line: 20
														(open|close)_bracket_op: [
														In eval_expression. i->value = - i->children.size() = 2
														in scope 6, at line: 20
														add_op: -
															In eval_expression. i->value = j i->children.size() = 0
															in scope 6, at line: 20
															identifier: j
															In eval_expression. i->value = 1 i->children.size() = 0
															in scope 6, at line: 20
															num: 1
														In eval_expression. i->value = ] i->children.size() = 0
														in scope 6, at line: 20
														(open|close)_bracket_op: ]
												In eval_expression. i->value = a i->children.size() = 1
												in scope 6, at line: 20
												identifier: a
													In eval_expression. i->value =  i->children.size() = 3
													in scope 6, at line: 20
													key_exp: 
														In eval_expression. i->value = [ i->children.size() = 0
														in scope 6, at line: 20
														(open|close)_bracket_op: [
														In eval_expression. i->value = j i->children.size() = 0
														in scope 6, at line: 20
														identifier: j
														In eval_expression. i->value = ] i->children.size() = 0
														in scope 6, at line: 20
														(open|close)_bracket_op: ]
												In eval_expression. i->value = ; i->children.size() = 0
												in scope 6, at line: 20
												semicolon_op: ;
											In eval_expression. i->value = = i->children.size() = 3
											in scope 6, at line: 21
											assignment_op: =
												In eval_expression. i->value = a i->children.size() = 1
												in scope 6, at line: 21
												identifier: a
													In eval_expression. i->value =  i->children.size() = 3
													in scope 6, at line: 21
													key_exp: 
														In eval_expression. i->value = [ i->children.size() = 0
														in scope 6, at line: 21
														(open|close)_bracket_op: [
														In eval_expression. i->value = j i->children.size() = 0
														in scope 6, at line: 21
														identifier: j
														In eval_expression. i->value = ] i->children.size() = 0
														in scope 6, at line: 21
														(open|close)_bracket_op: ]
												In eval_expression. i->value = temp i->children.size() = 0
												in scope 6, at line: 21
												identifier: temp
												In eval_expression. i->value = ; i->children.size() = 0
												in scope 6, at line: 21
												semicolon_op: ;
											In eval_expression. i->value = = i->children.size() = 3
											in scope 6, at line: 22
											assignment_op: =
												In eval_expression. i->value = swap i->children.size() = 0
												in scope 6, at line: 22
												identifier: swap
												In eval_expression. i->value = true i->children.size() = 0
												in scope 6, at line: 22
												boolean: true
												In eval_expression. i->value = ; i->children.size() = 0
												in scope 6, at line: 22
												semicolon_op: ;
									In eval_expression. i->value = = i->children.size() = 3
									in scope 5, at line: 24
									assignment_op: =
										In eval_expression. i->value = j i->children.size() = 0
										in scope 5, at line: 24
										identifier: j
										In eval_expression. i->value = + i->children.size() = 2
										in scope 5, at line: 24
										add_op: +
											In eval_expression. i->value = j i->children.size() = 0
											in scope 5, at line: 24
											identifier: j
											In eval_expression. i->value = 1 i->children.size() = 0
											in scope 5, at line: 24
											num: 1
										In eval_expression. i->value = ; i->children.size() = 0
										in scope 5, at line: 24
										semicolon_op: ;
							In eval_expression. i->value = = i->children.size() = 3
							in scope 4, at line: 26
							assignment_op: =
								In eval_expression. i->value = i i->children.size() = 0
								in scope 4, at line: 26
								identifier: i
								In eval_expression. i->value = - i->children.size() = 2
								in scope 4, at line: 26
								add_op: -
									In eval_expression. i->value = i i->children.size() = 0
									in scope 4, at line: 26
									identifier: i
									In eval_expression. i->value = 1 i->children.size() = 0
									in scope 4, at line: 26
									num: 1
								In eval_expression. i->value = ; i->children.size() = 0
								in scope 4, at line: 26
								semicolon_op: ;
			In eval_expression. i->value = return i->children.size() = 2
			in scope 2, at line: 29
			return_statement: return
				In eval_expression. i->value = a i->children.size() = 0
				in scope 2, at line: 29
				identifier: a
				In eval_expression. i->value = ; i->children.size() = 0
				in scope 2, at line: 29
				semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 32
	assignment_op: =
		In eval_expression. i->value = l i->children.size() = 0
		in scope 0, at line: 32
		identifier: l
		In eval_expression. i->value =  i->children.size() = 0
		in scope 0, at line: 32
		vec_op: 
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 32
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 33
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 33
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 33
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 33
			identifier: l
			In eval_expression. i->value = 2 i->children.size() = 0
			in scope 0, at line: 33
			num: 2
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 33
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 33
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 34
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 34
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 34
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 34
			identifier: l
			In eval_expression. i->value = 1 i->children.size() = 0
			in scope 0, at line: 34
			num: 1
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 34
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 34
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 35
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 35
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 35
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 35
			identifier: l
			In eval_expression. i->value = 4 i->children.size() = 0
			in scope 0, at line: 35
			num: 4
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 35
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 35
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 36
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 36
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 36
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 36
			identifier: l
			In eval_expression. i->value = 3 i->children.size() = 0
			in scope 0, at line: 36
			num: 3
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 36
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 36
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 37
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 37
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 37
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 37
			identifier: l
			In eval_expression. i->value = 6 i->children.size() = 0
			in scope 0, at line: 37
			num: 6
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 37
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 37
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 38
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 38
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 38
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 38
			identifier: l
			In eval_expression. i->value = 5 i->children.size() = 0
			in scope 0, at line: 38
			num: 5
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 38
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 38
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 39
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 39
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 39
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 39
			identifier: l
			In eval_expression. i->value = 8 i->children.size() = 0
			in scope 0, at line: 39
			num: 8
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 39
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 39
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 40
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 40
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 40
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 40
			identifier: l
			In eval_expression. i->value = 7 i->children.size() = 0
			in scope 0, at line: 40
			num: 7
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 40
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 40
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 41
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 41
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 41
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 41
			identifier: l
			In eval_expression. i->value = 10 i->children.size() = 0
			in scope 0, at line: 41
			num: 10
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 41
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 41
		semicolon_op: ;
	In eval_expression. i->value = append i->children.size() = 2
	in scope 0, at line: 42
	identifier: append
		In eval_expression. i->value =  i->children.size() = 4
		in scope 0, at line: 42
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 42
			(open|close)_paren_op: (
			In eval_expression. i->value = l i->children.size() = 0
			in scope 0, at line: 42
			identifier: l
			In eval_expression. i->value = 9 i->children.size() = 0
			in scope 0, at line: 42
			num: 9
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 42
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 42
		semicolon_op: ;
	In eval_expression. i->value = print i->children.size() = 2
	in scope 0, at line: 45
	identifier: print
		In eval_expression. i->value =  i->children.size() = 3
		in scope 0, at line: 45
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 45
			(open|close)_paren_op: (
			In eval_expression. i->value = "un-sorted:" i->children.size() = 0
			in scope 0, at line: 45
			string: "un-sorted:"
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 45
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 45
		semicolon_op: ;
	In eval_expression. i->value = for i->children.size() = 3
	in scope 0, at line: 46
	for_s: for
		In eval_expression. i->value = i i->children.size() = 0
		in scope 7, at line: 46
		identifier: i
		In eval_expression. i->value = in i->children.size() = 1
		in scope 7, at line: 46
		in_op: in
			In eval_expression. i->value = l i->children.size() = 0
			in scope 7, at line: 46
			identifier: l
		In eval_expression. i->value = print i->children.size() = 2
		in scope 7, at line: 47
		identifier: print
			In eval_expression. i->value =  i->children.size() = 3
			in scope 8, at line: 48
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 8, at line: 48
				(open|close)_paren_op: (
				In eval_expression. i->value = i i->children.size() = 0
				in scope 8, at line: 48
				identifier: i
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 8, at line: 48
				(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			in scope 8, at line: 48
			semicolon_op: ;
	In eval_expression. i->value = = i->children.size() = 3
	in scope 0, at line: 54
	assignment_op: =
		In eval_expression. i->value = n i->children.size() = 0
		in scope 0, at line: 54
		identifier: n
		In eval_expression. i->value = bubble_sort i->children.size() = 1
		in scope 0, at line: 54
		identifier: bubble_sort
			In eval_expression. i->value =  i->children.size() = 3
			in scope 0, at line: 54
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 0, at line: 54
				(open|close)_paren_op: (
				In eval_expression. i->value = l i->children.size() = 0
				in scope 0, at line: 54
				identifier: l
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 0, at line: 54
				(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 54
		semicolon_op: ;
	In eval_expression. i->value = print i->children.size() = 2
	in scope 0, at line: 57
	identifier: print
		In eval_expression. i->value =  i->children.size() = 3
		in scope 0, at line: 57
		arg_list_exp: 
			In eval_expression. i->value = ( i->children.size() = 0
			in scope 0, at line: 57
			(open|close)_paren_op: (
			In eval_expression. i->value = "sorted:" i->children.size() = 0
			in scope 0, at line: 57
			string: "sorted:"
			In eval_expression. i->value = ) i->children.size() = 0
			in scope 0, at line: 57
			(open|close)_paren_op: )
		In eval_expression. i->value = ; i->children.size() = 0
		in scope 0, at line: 57
		semicolon_op: ;
	In eval_expression. i->value = for i->children.size() = 3
	in scope 0, at line: 58
	for_s: for
		In eval_expression. i->value = i i->children.size() = 0
		in scope 9, at line: 58
		identifier: i
		In eval_expression. i->value = in i->children.size() = 1
		in scope 9, at line: 58
		in_op: in
			In eval_expression. i->value = n i->children.size() = 0
			in scope 9, at line: 58
			identifier: n
		In eval_expression. i->value = print i->children.size() = 2
		in scope 9, at line: 59
		identifier: print
			In eval_expression. i->value =  i->children.size() = 3
			in scope 10, at line: 60
			arg_list_exp: 
				In eval_expression. i->value = ( i->children.size() = 0
				in scope 10, at line: 60
				(open|close)_paren_op: (
				In eval_expression. i->value = i i->children.size() = 0
				in scope 10, at line: 60
				identifier: i
				In eval_expression. i->value = ) i->children.size() = 0
				in scope 10, at line: 60
				(open|close)_paren_op: )
			In eval_expression. i->value = ; i->children.size() = 0
			in scope 10, at line: 60
			semicolon_op: ;
Symbols:
Scope 0, parent = -1
	append
	bubble_sort
	l
	n
	print
Scope 1, parent = 0
	a
Scope 2, parent = 1
	len
	length
	swap
Scope 3, parent = 2
	i
Scope 4, parent = 3
	j
Scope 5, parent = 4
Scope 6, parent = 5
	temp
Scope 7, parent = 0
	i
Scope 8, parent = 7
Scope 9, parent = 0
	i
Scope 10, parent = 9

Instructions:
line_num : string: '' = input.dv ; function: '', offset = 0 ; 
defun : function: 'bubble_sort', offset = 19 ; 
enter : 
defarg : unknown: 'a' ; 
defarg : 
push : unknown: 'len' ; 
push : function: '', offset = 83 ; 
push : unknown: 'a' ; 
call : function_call: 'length' ; function: '', offset = 1 ; 
store : 
push : unknown: 'swap' ; 
push : boolean: '' = 1 ; 
store : 
push : unknown: 'swap' ; 
jmpf : function: '', offset = 483 ; 
enter : 
push : unknown: 'swap' ; 
push : boolean: '' = 0 ; 
store : 
push : unknown: 'i' ; 
push : unknown: 'len' ; 
push : num: '' = 1 ; 
sub : 
store : 
push : unknown: 'i' ; 
push : num: '' = 0 ; 
gte : 
jmpf : function: '', offset = 473 ; 
enter : 
push : unknown: 'j' ; 
push : num: '' = 1 ; 
store : 
push : unknown: 'j' ; 
push : unknown: 'i' ; 
lte : 
jmpf : function: '', offset = 437 ; 
enter : 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
push : num: '' = 1 ; 
sub : 
tbl_load : 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
tbl_load : 
gt : 
jmpf : function: '', offset = 401 ; 
enter : 
push : unknown: 'temp' ; 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
push : num: '' = 1 ; 
sub : 
tbl_load : 
store : 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
push : num: '' = 1 ; 
sub : 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
tbl_load : 
tbl_store : 
push : unknown: 'a' ; 
push : unknown: 'j' ; 
push : unknown: 'temp' ; 
tbl_store : 
push : unknown: 'swap' ; 
push : boolean: '' = 1 ; 
store : 
leave : 
push : unknown: 'j' ; 
push : unknown: 'j' ; 
push : num: '' = 1 ; 
add : 
store : 
leave : 
jmp : function: '', offset = 215 ; 
push : unknown: 'i' ; 
push : unknown: 'i' ; 
push : num: '' = 1 ; 
sub : 
store : 
leave : 
jmp : function: '', offset = 167 ; 
leave : 
jmp : function: '', offset = 103 ; 
push : unknown: 'a' ; 
return : 
push : unknown: 'l' ; 
new_vec: : 
push : function: '', offset = 538 ; 
push : num: '' = 2 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 581 ; 
push : num: '' = 1 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 624 ; 
push : num: '' = 4 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 667 ; 
push : num: '' = 3 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 710 ; 
push : num: '' = 6 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 753 ; 
push : num: '' = 5 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 796 ; 
push : num: '' = 8 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 839 ; 
push : num: '' = 7 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 882 ; 
push : num: '' = 10 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 925 ; 
push : num: '' = 9 ; 
push : unknown: 'l' ; 
call : function_call: 'append' ; function: '', offset = 2 ; 
pop : 
push : function: '', offset = 965 ; 
push : string: '' = un-sorted: ; 
call : function_call: 'print' ; function: '', offset = 1 ; 
pop : 
push : function: '', offset = 967 ; 
push : unknown: 'l' ; 
dup : num: '' = 0 ; 
push : unknown: '.table' ; 
swap : 
store : 
call : function_call: 'length' ; function: '', offset = 1 ; 
push : num: '' = 0 ; 
dup : num: '' = 1 ; 
dup : num: '' = 1 ; 
neq : 
jmpf : function: '', offset = 1153 ; 
load : unknown: '.table' ; 
dup : num: '' = 1 ; 
tbl_load : 
push : unknown: 'i' ; 
swap : 
store : 
push : function: '', offset = 1129 ; 
push : unknown: 'i' ; 
call : function_call: 'print' ; function: '', offset = 1 ; 
pop : 
push : num: '' = 1 ; 
add : 
jmp : function: '', offset = 1034 ; 
pop : 
pop : 
push : unknown: 'n' ; 
push : function: '', offset = 1196 ; 
push : unknown: 'l' ; 
call : function_call: 'bubble_sort' ; function: '', offset = 1 ; 
store : 
push : function: '', offset = 1233 ; 
push : string: '' = sorted: ; 
call : function_call: 'print' ; function: '', offset = 1 ; 
pop : 
push : function: '', offset = 1235 ; 
push : unknown: 'n' ; 
dup : num: '' = 0 ; 
push : unknown: '.table' ; 
swap : 
store : 
call : function_call: 'length' ; function: '', offset = 1 ; 
push : num: '' = 0 ; 
dup : num: '' = 1 ; 
dup : num: '' = 1 ; 
neq : 
jmpf : function: '', offset = 1421 ; 
load : unknown: '.table' ; 
dup : num: '' = 1 ; 
tbl_load : 
push : unknown: 'i' ; 
swap : 
store : 
push : function: '', offset = 1397 ; 
push : unknown: 'i' ; 
call : function_call: 'print' ; function: '', offset = 1 ; 
pop : 
push : num: '' = 1 ; 
add : 
jmp : function: '', offset = 1302 ; 
pop : 
pop : 
halt : 
compiled input.dv successfully
