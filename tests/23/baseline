AST:
(Def bubble_sort (Arg_list_decl (Def_arg a)) (Block (Local len (Call (ArgList a) length)) (Local swap true) (While (Condition swap) (Block (= swap false) (Local i (- len 1)) (While (Condition (>= i 0)) (Block (Local j 1) (While (Condition (<= j i)) (Block (If (Condition (> (Key a (- j 1)) (Key a j))) (Block (Local temp (Key a (- j 1))) (= (Key a (- j 1)) (Key a j)) (= (Key a j) temp) (= swap true))) (= j (+ j 1)))) (= i (- i 1)))))) (Return a))) (Local l Vec_init) (Call (ArgList l 2) append) (Call (ArgList l 1) append) (Call (ArgList l 4) append) (Call (ArgList l 3) append) (Call (ArgList l 6) append) (Call (ArgList l 5) append) (Call (ArgList l 8) append) (Call (ArgList l 7) append) (Call (ArgList l 10) append) (Call (ArgList l 9) append) (Call (ArgList "un-sorted:") print) (For (In i l) (Block (Call (ArgList i) print))) (Local n (Call (ArgList l) bubble_sort)) (Call (ArgList "sorted:") print) (For (In i n) (Block (Call (ArgList i) print))) <EOF>
Symbol table:
Function: @main, 0 arguments, 4 locals
	all names: function bubble_sort; local i; local i; local l; local n; 
	argument scope vars: function bubble_sort; local l; local n; 
Function: bubble_sort, 1 arguments, 6 locals
	all names: argument a; local i; local j; local len; local swap; local temp; 
	argument scope vars: argument a; 
Scope: 2
	vars: local len; local swap; 
Scope: 3
	vars: local i; 
Scope: 4
	vars: local j; 
Scope: 5
	vars: 
Scope: 6
	vars: local temp; 
Scope: 7
	vars: local i; 
Scope: 8
	vars: 
Scope: 9
	vars: local i; 
Scope: 10
	vars: 
Constant data pool:
<boolean-true>
<boolean-false>
<null-value>
__name__
__class__
__bases__
__module__
new
delete
self
rewind
next
print
str
chr
append
length
copy
name
type
exit
num
range
eval
open
close
flush
read
readstring
readline
readlines
write
writestring
writeline
writelines
seek
tell
stdin
stdout
stderr
format
join
error
seterror
geterror
concat
insert
remove
find
rfind
reverse
sort
slice
strip
lstrip
rstrip
split
replace
upper
lower
isalphanum
isalpha
isdigit
islower
isupper
isspace
ispunct
iscntrl
isprint
isxdigit
min
max
pop
count
map
filter
reduce
any
all
keys
values
merge
0
1
2
3
4
5
6
7
8
9
10
sorted:
un-sorted:
a
bubble_sort
i
j
l
len
n
swap
temp
Function objects:
function: @main, from file: input.dv, line: 0
0 arg(s), default value indices: 
4 local(s): l i n i 
code address: 0
function: bubble_sort, from file: input.dv, line: 3
1 arg(s), default value indices: 
6 local(s): a len swap i j temp 
code address: 14
Instructions:
   0: def_function	96 (bubble_sort), 14
   9: jmp		131
  14: enter		 
  15: pushlocal0		 
  16: pushconst		16 (length)
  21: call		1
  26: def_local1		 
  27: push_true		 
  28: def_local2		 
  29: pushlocal2		 
  30: jmpf		124
  35: enter		 
  36: push_false		 
  37: storelocal2		 
  38: pushlocal1		 
  39: push_one		 
  40: sub		 
  41: def_local3		 
  42: pushlocal3		 
  43: push_zero		 
  44: gte		 
  45: jmpf		118
  50: enter		 
  51: push_one		 
  52: def_local4		 
  53: pushlocal4		 
  54: pushlocal3		 
  55: lte		 
  56: jmpf		108
  61: enter		 
  62: pushlocal0		 
  63: pushlocal4		 
  64: push_one		 
  65: sub		 
  66: tbl_load	
  67: pushlocal0		 
  68: pushlocal4		 
  69: tbl_load	
  70: gt		 
  71: jmpf		98
  76: enter		 
  77: pushlocal0		 
  78: pushlocal4		 
  79: push_one		 
  80: sub		 
  81: tbl_load	
  82: def_local5		 
  83: pushlocal0		 
  84: pushlocal4		 
  85: push_one		 
  86: sub		 
  87: pushlocal0		 
  88: pushlocal4		 
  89: tbl_load	
  90: tbl_store	
  91: pushlocal0		 
  92: pushlocal4		 
  93: pushlocal5		 
  94: tbl_store	
  95: push_true		 
  96: storelocal2		 
  97: leave		 
  98: pushlocal4		 
  99: push_one		 
 100: add		 
 101: storelocal4		 
 102: leave		 
 103: jmp		53
 108: pushlocal3		 
 109: push_one		 
 110: sub		 
 111: storelocal3		 
 112: leave		 
 113: jmp		42
 118: leave		 
 119: jmp		29
 124: pushlocal0		 
 125: return		1
 130: leave		 
 131: new_vec		0
 136: def_local0		 
 137: pushlocal0		 
 138: push		2
 143: pushconst		15 (append)
 148: call		2
 153: pop		 
 154: pushlocal0		 
 155: push_one		 
 156: pushconst		15 (append)
 161: call		2
 166: pop		 
 167: pushlocal0		 
 168: push		4
 173: pushconst		15 (append)
 178: call		2
 183: pop		 
 184: pushlocal0		 
 185: push		3
 190: pushconst		15 (append)
 195: call		2
 200: pop		 
 201: pushlocal0		 
 202: push		6
 207: pushconst		15 (append)
 212: call		2
 217: pop		 
 218: pushlocal0		 
 219: push		5
 224: pushconst		15 (append)
 229: call		2
 234: pop		 
 235: pushlocal0		 
 236: push		8
 241: pushconst		15 (append)
 246: call		2
 251: pop		 
 252: pushlocal0		 
 253: push		7
 258: pushconst		15 (append)
 263: call		2
 268: pop		 
 269: pushlocal0		 
 270: push		10
 275: pushconst		15 (append)
 280: call		2
 285: pop		 
 286: pushlocal0		 
 287: push		9
 292: pushconst		15 (append)
 297: call		2
 302: pop		 
 303: pushconst		94 (un-sorted:)
 308: pushconst		12 (print)
 313: call		1
 318: pop		 
 319: pushlocal0		 
 320: dup1		 
 321: pushconst		10 (rewind)
 326: method_load	
 327: call_method		0
 332: pop		 
 333: for_iter		358
 338: def_local1		 
 339: enter		 
 340: pushlocal1		 
 341: pushconst		12 (print)
 346: call		1
 351: pop		 
 352: leave		 
 353: jmp		333
 358: pop		 
 359: pushlocal0		 
 360: pushconst		96 (bubble_sort)
 365: call		1
 370: def_local2		 
 371: pushconst		93 (sorted:)
 376: pushconst		12 (print)
 381: call		1
 386: pop		 
 387: pushlocal2		 
 388: dup1		 
 389: pushconst		10 (rewind)
 394: method_load	
 395: call_method		0
 400: pop		 
 401: for_iter		426
 406: def_local3		 
 407: enter		 
 408: pushlocal3		 
 409: pushconst		12 (print)
 414: call		1
 419: pop		 
 420: leave		 
 421: jmp		401
 426: pop		 
 427: halt		 
