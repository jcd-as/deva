AST:
(Def bubble_sort (Arg_list_decl (Def_arg a)) (Block (Local len (Call (ArgList a) length)) (Local swap true) (While (Condition swap) (Block (= swap false) (Local i (- len 1)) (While (Condition (>= i 0)) (Block (Local j 1) (While (Condition (<= j i)) (Block (If (Condition (> (Key a (- j 1)) (Key a j))) (Block (Local temp (Key a (- j 1))) (= (Key a (- j 1)) (Key a j)) (= (Key a j) temp) (= swap true))) (= j (+ j 1)))) (= i (- i 1)))))) (Return a))) (Local l Vec_init) (Call (ArgList l 2) append) (Call (ArgList l 1) append) (Call (ArgList l 4) append) (Call (ArgList l 3) append) (Call (ArgList l 6) append) (Call (ArgList l 5) append) (Call (ArgList l 8) append) (Call (ArgList l 7) append) (Call (ArgList l 10) append) (Call (ArgList l 9) append) (Call (ArgList "un-sorted:") print) (For (In i l) (Block (Call (ArgList i) print))) (Local n (Call (ArgList l) bubble_sort)) (Call (ArgList "sorted:") print) (For (In i n) (Block (Call (ArgList i) print))) <EOF>
Symbol table:
Function: @main, 0 arguments, 4 locals
	all names: function bubble_sort; local i; local i; local l; local n; 
	argument scope vars: function bubble_sort; local l; local n; 
Function: bubble_sort, 1 arguments, 6 locals
	all names: argument a; local i; local j; local len; local swap; local temp; 
	argument scope vars: argument a; 
Scope: 2
	vars: local len; local swap; 
Scope: 3
	vars: local i; 
Scope: 4
	vars: local j; 
Scope: 5
	vars: 
Scope: 6
	vars: local temp; 
Scope: 7
	vars: local i; 
Scope: 8
	vars: 
Scope: 9
	vars: local i; 
Scope: 10
	vars: 
Constant data pool:
<boolean-true>
<boolean-false>
<null-value>

__name__
__class__
__bases__
__module__
new
delete
self
rewind
next
print
str
chr
append
length
copy
name
type
exit
num
range
eval
open
close
flush
read
readstring
readline
readlines
write
writestring
writeline
writelines
seek
tell
stdin
stdout
stderr
format
join
error
seterror
geterror
importmodule
concat
insert
remove
find
rfind
reverse
sort
slice
strip
lstrip
rstrip
split
replace
upper
lower
isalphanum
isalpha
isdigit
islower
isupper
isspace
ispunct
iscntrl
isprint
isxdigit
min
max
pop
count
map
filter
reduce
any
all
keys
values
merge
0
1
2
3
4
5
6
7
8
9
10
sorted:
un-sorted:
a
bubble_sort
i
j
l
len
n
swap
temp
Function objects:
function: @main, from file: input.dv, line: 0
0 arg(s), default value indices: 
4 local(s): l i n i 
code address: 0
function: bubble_sort, from file: input.dv, line: 3
1 arg(s), default value indices: 
6 local(s): a len swap i j temp 
code address: 18
Instructions:
   0: def_function	3 98 ( # bubble_sort), 18
  13: jmp		135
  18: enter		 
  19: pushlocal0		 
  20: pushconst		17 (length)
  25: call		1
  30: def_local1		 
  31: push_true		 
  32: def_local2		 
  33: pushlocal2		 
  34: jmpf		128
  39: enter		 
  40: push_false		 
  41: storelocal2		 
  42: pushlocal1		 
  43: push_one		 
  44: sub		 
  45: def_local3		 
  46: pushlocal3		 
  47: push_zero		 
  48: gte		 
  49: jmpf		122
  54: enter		 
  55: push_one		 
  56: def_local4		 
  57: pushlocal4		 
  58: pushlocal3		 
  59: lte		 
  60: jmpf		112
  65: enter		 
  66: pushlocal0		 
  67: pushlocal4		 
  68: push_one		 
  69: sub		 
  70: tbl_load	
  71: pushlocal0		 
  72: pushlocal4		 
  73: tbl_load	
  74: gt		 
  75: jmpf		102
  80: enter		 
  81: pushlocal0		 
  82: pushlocal4		 
  83: push_one		 
  84: sub		 
  85: tbl_load	
  86: def_local5		 
  87: pushlocal0		 
  88: pushlocal4		 
  89: push_one		 
  90: sub		 
  91: pushlocal0		 
  92: pushlocal4		 
  93: tbl_load	
  94: tbl_store	
  95: pushlocal0		 
  96: pushlocal4		 
  97: pushlocal5		 
  98: tbl_store	
  99: push_true		 
 100: storelocal2		 
 101: leave		 
 102: pushlocal4		 
 103: push_one		 
 104: add		 
 105: storelocal4		 
 106: leave		 
 107: jmp		57
 112: pushlocal3		 
 113: push_one		 
 114: sub		 
 115: storelocal3		 
 116: leave		 
 117: jmp		46
 122: leave		 
 123: jmp		33
 128: pushlocal0		 
 129: return		1
 134: leave		 
 135: new_vec		0
 140: def_local0		 
 141: pushlocal0		 
 142: push		2
 147: pushconst		16 (append)
 152: call		2
 157: pop		 
 158: pushlocal0		 
 159: push_one		 
 160: pushconst		16 (append)
 165: call		2
 170: pop		 
 171: pushlocal0		 
 172: push		4
 177: pushconst		16 (append)
 182: call		2
 187: pop		 
 188: pushlocal0		 
 189: push		3
 194: pushconst		16 (append)
 199: call		2
 204: pop		 
 205: pushlocal0		 
 206: push		6
 211: pushconst		16 (append)
 216: call		2
 221: pop		 
 222: pushlocal0		 
 223: push		5
 228: pushconst		16 (append)
 233: call		2
 238: pop		 
 239: pushlocal0		 
 240: push		8
 245: pushconst		16 (append)
 250: call		2
 255: pop		 
 256: pushlocal0		 
 257: push		7
 262: pushconst		16 (append)
 267: call		2
 272: pop		 
 273: pushlocal0		 
 274: push		10
 279: pushconst		16 (append)
 284: call		2
 289: pop		 
 290: pushlocal0		 
 291: push		9
 296: pushconst		16 (append)
 301: call		2
 306: pop		 
 307: pushconst		96 (un-sorted:)
 312: pushconst		13 (print)
 317: call		1
 322: pop		 
 323: pushlocal0		 
 324: dup1		 
 325: pushconst		11 (rewind)
 330: method_load	
 331: call_method		0
 336: pop		 
 337: for_iter		362
 342: def_local1		 
 343: enter		 
 344: pushlocal1		 
 345: pushconst		13 (print)
 350: call		1
 355: pop		 
 356: leave		 
 357: jmp		337
 362: pop		 
 363: pushlocal0		 
 364: pushconst		98 (bubble_sort)
 369: call		1
 374: def_local2		 
 375: pushconst		95 (sorted:)
 380: pushconst		13 (print)
 385: call		1
 390: pop		 
 391: pushlocal2		 
 392: dup1		 
 393: pushconst		11 (rewind)
 398: method_load	
 399: call_method		0
 404: pop		 
 405: for_iter		430
 410: def_local3		 
 411: enter		 
 412: pushlocal3		 
 413: pushconst		13 (print)
 418: call		1
 423: pop		 
 424: leave		 
 425: jmp		405
 430: pop		 
 431: halt		 
