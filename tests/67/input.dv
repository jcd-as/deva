# test nested functions
class A
{
	def new()
	{
		print( "I am constructor" );
		def foo( s ){ print( "just constructed an: " + str( s.__class__ ) ); }
		foo( self );
	}
	def delete()
	{
		print( "I am destructor" );
		def foo( s ){ print( "destroying an: " + str( s.__class__ ) ); }
		foo( self );
	}
}
local a = new A();

for( i in range( 0, 10 ) )
{
	print( i );
	def brk(){ extern i; if( i > 4 ) return true; }
	if( brk() )
		break;
	continue;
}

for( i in range( 0, 10 ) )
{
	print( i );
	def brk(){ print( "whee" ); }
	brk();
	continue;
	print( "unreachable" );
}

if( false )
{
	print( "unreachable" );
}
else
{
	def foo(){ print( "reached!" ); }
	if( true )
		foo();
}

# test vector map, filter, reduce with nested fcns
def squares( v )
{
	def fcn( n )
	{
		return n * n;
	}
	return v.map( fcn );
}

def only_gt_two( v )
{
	def fcn( n )
	{
		if( n > 2 )
			return true;
		else
			return false;
	}
	return v.filter( fcn );
}

def adder( v )
{
	def fcn( n, m )
	{
		return (n + m);
	}
	return v.reduce( fcn );
}

local v = [0,1,2,3,4,5,6,7,8,9];
# map
local u = squares( v );
print( u );
# filter
v = only_gt_two( v );
print( v );
# reduce
local x = adder( v );
print( x );

# fcn nested in a loop
if( true )
{
	for( i in range( 0, 10 ) )
	{
		def Foo( n )
		{
			local r = "word";
			r += " up, " + str( n );
			return  r;
		}
		print( Foo( i ) );
	}
}

# fcn nested in method
class Foo
{
	def Bar()
	{
		def Jam()
		{
			local r = "word";
			r += " up";
			return  r;
		}
		return Jam();
	}
}

local f = new Foo();
print( f.Bar() );

def sort_vector( v )
{
	# helper fcn to sort list of paths in the order we want
	def gt( a, b )
	{
		return a > b;
	}
# simple insertion sort routine, used for running the tests in order
def isort( v, greater )
{
    for( i in range( 1, length(v) ) )
	{
        local value = v[i];
        local j = i - 1;
        local done = false;
        while( !done )
		{
			if( greater( v[j], value ) )
			{
                v[j + 1] = v[j];
                j = j - 1;
                if( j < 0 )
                    done = true;
			}
            else
                done = true;
		}
        v[j + 1] = value;
	}
}

	isort( v, gt );
}

local vec = [23, 43, 54325, 1, 0, 67, -1, 3, 9, 0.5];
sort_vector( vec );
print( vec );

def foo()
{
	if( true )
	{
		def bar()
		{
			return "bar";
		}
		# this succeeds, bar() is in scope
		print( bar() );
	}
	# but this fails, bar() is out of scope
#	print( bar() );
}

foo();
