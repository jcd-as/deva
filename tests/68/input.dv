# slices tests:
v = [0,1,2];

# [1, 2]
w = v[1:$];
print( w );
# [] 
w = v[$:$];
print( w );
# [1]
w = v[1:-1];
print( w );
# []
w = v[22:0];
print( w );
# [0,1,2]
w = v[0:22];
print( w );

# parser has to work hard on this:
print( length( v[1:length(v)] ) );
# this accomplishes the same thing in a better way:
print( length( v[1:$] ) );

# same as insert at idx 1:
# i.e. [0, 'a', 1, 2, 3]
v = [0, 1, 2, 3];
v[1:1] = ['a'];
print( v );

# euler's sieve
import math;

def euler_sieve(n)
{
    # Create a candidate list within which non-primes will
    # marked as null, noting that only candidates below
    # sqrt(n) need be checked
    local candidates = range( n+1 );
    fin = math.floor( math.sqrt( n ) );
 
    # Loop over the candidates, marking out each multiple.
    # If the current candidate is already checked off then
    # continue to the next iteration
	local i = 2;
	while( i < fin + 1 )
	{
        if( !candidates[i] )
		{
			i += 1;
            continue;
		}
 
		local none = [];
		local c = 0;
		while( c < math.floor( n/i ) -1 )
		{
			none.append( null );
			c += 1;
		}
        candidates[2 * i : $ : i] = none;

		i += 1;
	}
 
    # Filter out non-primes (nulls) and return the list
	def notnull( n ){ if( n ) return n; }
	ret = candidates.filter( notnull );
	return ret[1:$];
}

print( euler_sieve( 1000 ) );

